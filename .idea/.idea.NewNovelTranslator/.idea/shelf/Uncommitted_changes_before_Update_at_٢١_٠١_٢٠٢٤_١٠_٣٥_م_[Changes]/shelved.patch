Index: WebApi/Responses/Response.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text.Json;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nnamespace WebApi.Responses;\r\n\r\npublic abstract class Response : IActionResult\r\n{\r\n    protected virtual int StatusCode { get; set; }\r\n    public virtual string Status { get; }\r\n    public virtual string? Description { get; set; }\r\n\r\n    public async Task ExecuteResultAsync(ActionContext context)\r\n    {\r\n        var response = context.HttpContext.Response;\r\n        response.ContentType = \"application/json; charset=utf-8\";\r\n        response.StatusCode = StatusCode;\r\n\r\n        await using (var writer = new StreamWriter(response.Body))\r\n        {\r\n            await writer.WriteAsync(JsonSerializer.Serialize(this));\r\n            await writer.FlushAsync();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Responses/Response.cs b/WebApi/Responses/Response.cs
--- a/WebApi/Responses/Response.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Responses/Response.cs	(date 1705789619814)
@@ -1,5 +1,5 @@
-using System.Text.Json;
 using Microsoft.AspNetCore.Mvc;
+using System.Text.Json;
 
 namespace WebApi.Responses;
 
Index: WebApi/Controllers/NovelController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Security.Claims;\r\nusing FluentValidation;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing WebApi.DTOs;\r\nusing WebApi.Responses;\r\nusing WebApi.Services;\r\nusing WebApi.Extensions;\r\n\r\nnamespace WebApi.Controllers;\r\n\r\n[Route(\"api/[controller]\")]\r\n[ApiController]\r\npublic class NovelController : ControllerBase //TDO use DataProtectionProvider to create protector to encrypt ID - Try make code more clean\r\n{\r\n    private readonly NovelService _novelService;\r\n    private readonly NovelSharedService _novelSharedService;\r\n    private readonly IValidator<CreateNovelDto> _novelValidator;\r\n\r\n    public NovelController(NovelService novelService, IValidator<CreateNovelDto> createNovelValidator, NovelSharedService novelSharedService)\r\n    {\r\n        _novelService = novelService;\r\n        _novelValidator = createNovelValidator;\r\n        _novelSharedService = novelSharedService;\r\n    }\r\n\r\n    // GET: api/<NovelController>\r\n    [HttpGet]\r\n    public IActionResult Get()\r\n    {\r\n        return Ok(_novelService.GetAllNovels());\r\n    }\r\n\r\n    // GET api/<NovelController>/5\r\n    [HttpGet(\"{id}\")]\r\n    public IActionResult Get(int id)\r\n    {\r\n        var novel = _novelService.GetById(id);\r\n\r\n        if (novel == null)\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"Novel Id Not Exist\"\r\n            };\r\n        }\r\n        \r\n        return Ok(new\r\n        {\r\n            novel.Id,\r\n            novel.Name,\r\n            OwnerUserId = novel.UserId,\r\n        });\r\n    }\r\n\r\n    // POST api/<NovelController>\r\n    [HttpPost]\r\n    [Authorize]\r\n    public async Task<IActionResult> Create([FromBody] CreateNovelDto novelDto)\r\n    {\r\n        var validationResult = await _novelValidator.ValidateAsync(novelDto);\r\n\r\n        if (!validationResult.IsValid)\r\n        {\r\n            return BadRequest(validationResult.Errors);\r\n        }\r\n\r\n        var userId = User.FindFirst(ClaimTypes.NameIdentifier)!.Value.ToInt();\r\n\r\n        var novelUserId = await _novelService.AddNovel(novelDto.NovelName, userId);\r\n        \r\n        if (novelUserId == 0)\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Already Own Novel With Same Name\"\r\n            };\r\n        }\r\n\r\n        return new OkResponse\r\n        {\r\n            Description = \"Created\"\r\n        };\r\n    }\r\n\r\n    // DELETE api/<NovelController>/5\r\n    [HttpDelete(\"{id}\")]\r\n    [Authorize]\r\n    public async Task<IActionResult> Delete(int id)\r\n    {\r\n        var novel = _novelService.GetById(id);\r\n\r\n        if (novel == null) // check if novel not exist\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"No Novel With This Id\"\r\n            };\r\n        }\r\n\r\n        if (novel.UserId != User.GetCurrentUserId()) //check if current User Have Permission To Delete This Novel (Only Owner Can Delete Novel (first NovelUser is the Owner and is who create the novel))\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Cant Delete Novel Not Created By You\"\r\n            };\r\n        }\r\n\r\n        var isDeleted = await _novelService.DeleteNovel(id);\r\n        \r\n        if (!isDeleted)\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"Unknown Error\"\r\n            };\r\n        }\r\n        \r\n        return new OkResponse\r\n        {\r\n            Description = \"Deleted\"\r\n        };\r\n    }\r\n\r\n    [HttpPost(\"CheckIfOwnPermissionOnNovel\")]\r\n    public async Task<IActionResult> CheckIfOwnPermissionOnNovel(CheckForPermissionDto checkForPermission)\r\n    {\r\n        var result = await _novelSharedService.IsUserHavePermissionOnThisNovel(checkForPermission.NovelId, checkForPermission.UserId);\r\n        \r\n        if (result)\r\n        {\r\n            return new OkResponse\r\n            {\r\n                Description = \"true\"\r\n            };\r\n        }\r\n\r\n        return new OkResponse()\r\n        {\r\n            Description = \"False\"\r\n        };\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Controllers/NovelController.cs b/WebApi/Controllers/NovelController.cs
--- a/WebApi/Controllers/NovelController.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Controllers/NovelController.cs	(date 1705789619952)
@@ -1,11 +1,11 @@
-using System.Security.Claims;
 using FluentValidation;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
+using System.Security.Claims;
 using WebApi.DTOs;
+using WebApi.Extensions;
 using WebApi.Responses;
 using WebApi.Services;
-using WebApi.Extensions;
 
 namespace WebApi.Controllers;
 
@@ -44,7 +44,7 @@
                 Description = "Novel Id Not Exist"
             };
         }
-        
+
         return Ok(new
         {
             novel.Id,
@@ -68,7 +68,7 @@
         var userId = User.FindFirst(ClaimTypes.NameIdentifier)!.Value.ToInt();
 
         var novelUserId = await _novelService.AddNovel(novelDto.NovelName, userId);
-        
+
         if (novelUserId == 0)
         {
             return new BadRequestResponse
@@ -107,7 +107,7 @@
         }
 
         var isDeleted = await _novelService.DeleteNovel(id);
-        
+
         if (!isDeleted)
         {
             return new BadRequestResponse
@@ -115,7 +115,7 @@
                 Description = "Unknown Error"
             };
         }
-        
+
         return new OkResponse
         {
             Description = "Deleted"
@@ -126,7 +126,7 @@
     public async Task<IActionResult> CheckIfOwnPermissionOnNovel(CheckForPermissionDto checkForPermission)
     {
         var result = await _novelSharedService.IsUserHavePermissionOnThisNovel(checkForPermission.NovelId, checkForPermission.UserId);
-        
+
         if (result)
         {
             return new OkResponse
Index: WebApi/Controllers/EntityNameController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Security.Claims;\r\nusing FluentValidation;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing NovelTextProcessor;\r\nusing WebApi.DTOs;\r\nusing WebApi.Responses;\r\nusing WebApi.Services;\r\nusing WebApi.Extensions;\r\n\r\nnamespace WebApi.Controllers;\r\n\r\n[Route(\"api/[controller]\")]\r\n[ApiController]\r\npublic class EntityNameController : ControllerBase //TDO use IDataProtectionProvider to create protector to encrypt ID (Maybe Protect from CSRF Too I Not Sure) - Refactor Controllers (To make code more clean)\r\n{\r\n    private readonly EntityNameService _entityNameService;\r\n    private readonly IValidator<EntityNameDto> _entityNameValidator;\r\n    private readonly NovelService _novelService;\r\n    private readonly Document_NLP _documentNlp;\r\n\r\n    public EntityNameController(EntityNameService entityNameService, NovelService novelService, IValidator<EntityNameDto> entityNameValidator)\r\n    {\r\n        _entityNameService = entityNameService;\r\n        _novelService = novelService;\r\n        _entityNameValidator = entityNameValidator;\r\n        _documentNlp = new Document_NLP();\r\n    }\r\n\r\n    [HttpGet(\"{id}\")]\r\n    public IActionResult GetEntityNamesById(int id)\r\n    {\r\n        var entityNames = _entityNameService.GetEntityNamesByNovelId(id);\r\n\r\n        return Ok(entityNames.Select(e => new\r\n        {\r\n            e.Id,\r\n            e.EnglishName,\r\n            e.ArabicName,\r\n            e.Gender\r\n        }));\r\n    }\r\n\r\n    // POST api/<EntityNameController>\r\n    [HttpPost]\r\n    [Authorize]\r\n    public async Task<IActionResult> CreateMany([FromBody] EntityNameDto entityName)\r\n    {\r\n        //Validate\r\n        var validationResult = await _entityNameValidator.ValidateAsync(entityName);\r\n        if (!validationResult.IsValid)\r\n        {\r\n            return BadRequest(validationResult.Errors);\r\n        }\r\n        \r\n        //Check if user have acsses on this novel or not\r\n        var novelUserIdOfThisEntity = _novelService.GetById(entityName.NovelId)!.UserId;\r\n        \r\n        if (!_IsUserHaveAccess(novelUserIdOfThisEntity))\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Dont Have Permission On This Novel\"\r\n            };\r\n        }\r\n\r\n        //Add To database\r\n        var entityNamesAddResult = await _entityNameService.AddManyEntityNames(entityName);\r\n        \r\n        if (entityNamesAddResult) // If Add Not Failed\r\n            return NoContent();\r\n        \r\n        return new BadRequestResponse\r\n        {\r\n            Description = \"One Of EntityNames Or More Exist\"\r\n        };\r\n    }\r\n\r\n    // PUT api/<EntityNameController>/5\r\n    //TDO i think i will make only gender EditAble Here Later To Dont Broke Replace Bycouse Replace i will order by length (if i dont it will bug when have firstName only in line and other line with firstName lastName) so better make only gender editAble or ReOrderBy every edit (i will look at it when Finsh NLP NER Controller(Extract Names By Ai))\r\n    [HttpPut(\"{id}\")]\r\n    [Authorize]\r\n    public async Task<IActionResult> Update(int id, [FromBody] UpdateEntityName entityNameDetails)\r\n    {\r\n        //Check For permission\r\n        var userId = _GetCurrentUserId();\r\n        if (!_entityNameService.CheckIfNovelUserIdsOfThisEntityNameEqualThisNovelUserId(id, userId))\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Dont Have Permission On This Novel\"\r\n            };\r\n        }\r\n        \r\n        //Update EntityName\r\n        var result = await _entityNameService.UpdateEntityName(id, entityNameDetails.EnglishName, entityNameDetails.ArabicName ,entityNameDetails.Gender);\r\n\r\n        if (result)\r\n        {\r\n            return new OkResponse()\r\n            {\r\n                Description = \"Edited\"\r\n            };\r\n        }\r\n        \r\n        return new BadRequestResponse()\r\n        {\r\n            Description = \"Unknown Error\"\r\n        };\r\n    }\r\n\r\n    // DELETE api/<EntityNameController>/5\r\n    [HttpDelete(\"{id}\")]\r\n    [Authorize]\r\n    public IActionResult Delete(int id)\r\n    {\r\n        //Check For permission\r\n        var userId = _GetCurrentUserId();\r\n        if (!_entityNameService.CheckIfNovelUserIdsOfThisEntityNameEqualThisNovelUserId(id, userId))\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Dont Have Permission On This Novel\"\r\n            };\r\n        }\r\n        //Delete EntityName\r\n        _entityNameService.DeleteEntityName(id);\r\n        return NoContent();\r\n    }\r\n\r\n    [HttpPost(\"ExtractEntityNames\")]\r\n    [Authorize]\r\n    public async Task<IActionResult> ExtractEntityNamesFromText([FromBody] ExtractEntityNameDto extractEntityName)\r\n    {\r\n        await _documentNlp.RunAsync(extractEntityName.Text);\r\n        return Ok(_documentNlp.ExtractEntityNames());\r\n    }\r\n\r\n    private bool _IsUserHaveAccess(int novelUserId)\r\n    {\r\n        var userId = _GetCurrentUserId();\r\n        \r\n        if (userId != novelUserId)\r\n        {\r\n            return false;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    private int _GetCurrentUserId()\r\n    {\r\n        return User.FindFirst(ClaimTypes.NameIdentifier)!.Value.ToInt();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Controllers/EntityNameController.cs b/WebApi/Controllers/EntityNameController.cs
--- a/WebApi/Controllers/EntityNameController.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Controllers/EntityNameController.cs	(date 1705789619861)
@@ -1,12 +1,12 @@
-using System.Security.Claims;
 using FluentValidation;
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using NovelTextProcessor;
+using System.Security.Claims;
 using WebApi.DTOs;
+using WebApi.Extensions;
 using WebApi.Responses;
 using WebApi.Services;
-using WebApi.Extensions;
 
 namespace WebApi.Controllers;
 
@@ -52,10 +52,10 @@
         {
             return BadRequest(validationResult.Errors);
         }
-        
+
         //Check if user have acsses on this novel or not
         var novelUserIdOfThisEntity = _novelService.GetById(entityName.NovelId)!.UserId;
-        
+
         if (!_IsUserHaveAccess(novelUserIdOfThisEntity))
         {
             return new BadRequestResponse
@@ -66,10 +66,10 @@
 
         //Add To database
         var entityNamesAddResult = await _entityNameService.AddManyEntityNames(entityName);
-        
+
         if (entityNamesAddResult) // If Add Not Failed
             return NoContent();
-        
+
         return new BadRequestResponse
         {
             Description = "One Of EntityNames Or More Exist"
@@ -91,9 +91,9 @@
                 Description = "You Dont Have Permission On This Novel"
             };
         }
-        
+
         //Update EntityName
-        var result = await _entityNameService.UpdateEntityName(id, entityNameDetails.EnglishName, entityNameDetails.ArabicName ,entityNameDetails.Gender);
+        var result = await _entityNameService.UpdateEntityName(id, entityNameDetails.EnglishName, entityNameDetails.ArabicName, entityNameDetails.Gender);
 
         if (result)
         {
@@ -102,7 +102,7 @@
                 Description = "Edited"
             };
         }
-        
+
         return new BadRequestResponse()
         {
             Description = "Unknown Error"
@@ -139,12 +139,12 @@
     private bool _IsUserHaveAccess(int novelUserId)
     {
         var userId = _GetCurrentUserId();
-        
+
         if (userId != novelUserId)
         {
             return false;
         }
-        
+
         return true;
     }
 
Index: NovelTextProcessor/Processor.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text;\r\nusing NovelTextProcessor.Dtos;\r\nusing NovelTextProcessor.Extensions;\r\n\r\nnamespace NovelTextProcessor;\r\n\r\npublic class Processor\r\n{\r\n    private readonly EntityName[] _entityNames = null!;\r\n    private string _novelText;\r\n    private readonly string FixedArFemaleName = \"ماريا\";\r\n    private readonly string FixedArMaleName = \"أوليفر\";\r\n    private readonly string FixedEnFemaleName = \"Maria\";\r\n\r\n    private readonly string FixedEnMaleName = \"Oliver\";\r\n    private readonly List<SpanAndEntityNames> listOfSpanAndEntityNames = new();\r\n\r\n    public Processor(string novelText, EntityName[] entityNames)\r\n    {\r\n        _novelText = novelText;\r\n        _entityNames = entityNames;\r\n    }\r\n\r\n    public async Task RunAsync()\r\n    {\r\n        var englishSpans = _SplitTextToSpans(5000);\r\n\r\n        _MapEnglishSpansToListOfSpanAndEntityNames(ref englishSpans);\r\n        _SearchForEntityNamesInSpans();\r\n        _ReplaceAllEntityNamesInSpanToFixedName();\r\n        await TranslateAllSpansAsync(); // now spans in listOfSpanAndEntityNames is translated but names is FixedNames and listOfSpanAndEntityNames.EntityName have original names\r\n        _RestoreOriginalNames(); // now spans ready\r\n    }\r\n\r\n    private void _RestoreOriginalNames()\r\n    {\r\n        for (var i = 0; i < listOfSpanAndEntityNames.Count; i++)\r\n        for (var t = 0; t < listOfSpanAndEntityNames[i].EntityNames.Count; t++)\r\n            if (listOfSpanAndEntityNames[i].EntityNames[t].Gender == 'M')\r\n                listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span\r\n                    .ReplaceFirst(FixedArMaleName, listOfSpanAndEntityNames[i].EntityNames[t].ArabicName);\r\n            else\r\n                listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span\r\n                    .ReplaceFirst(FixedArFemaleName, listOfSpanAndEntityNames[i].EntityNames[t].ArabicName);\r\n    }\r\n\r\n    private async Task TranslateAllSpansAsync()\r\n    {\r\n        var spans = listOfSpanAndEntityNames.Select(x => x.Span).ToList();\r\n        var pretranslateSpans = await TextTranslator.Instance.SendRequestsAsync(spans);\r\n        var translatedSpans = pretranslateSpans.ToArray();\r\n\r\n        for (var i = 0; i < translatedSpans.Length; i++) listOfSpanAndEntityNames[i].Span = translatedSpans[i];\r\n    }\r\n\r\n    private void _ReplaceAllEntityNamesInSpanToFixedName()\r\n    {\r\n        for (var i = 0; i < listOfSpanAndEntityNames.Count; i++)\r\n            foreach (var entityName in listOfSpanAndEntityNames[i].EntityNames)\r\n                if (entityName.Gender == 'M')\r\n                    listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span\r\n                        .Replace(entityName.EnglishName, FixedEnMaleName);\r\n                else\r\n                    listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span\r\n                        .Replace(entityName.EnglishName, FixedEnFemaleName);\r\n    }\r\n\r\n    private void _MapEnglishSpansToListOfSpanAndEntityNames(ref string[] englishSpans)\r\n    {\r\n        foreach (var englishSpan in englishSpans)\r\n            listOfSpanAndEntityNames.Add(new SpanAndEntityNames\r\n            {\r\n                Span = englishSpan\r\n            });\r\n    }\r\n\r\n    /// <summary>\r\n    ///     Search In All List of SpanAndEntityNames If Found Span Contain EntityName Than Add it To\r\n    ///     SpanAndEntityNames.EntityNames\r\n    /// </summary>\r\n    /// <param name=\"listOfSpanAndEntityNames\"></param>\r\n    private void _SearchForEntityNamesInSpans()\r\n    {\r\n        for (var i = 0; i < listOfSpanAndEntityNames.Count; i++)\r\n            listOfSpanAndEntityNames[i].EntityNames =\r\n                _SearchForEntityNamesInSpan(new SpanAndEntityNames(listOfSpanAndEntityNames[i]));\r\n    }\r\n\r\n    private List<EntityName> _SearchForEntityNamesInSpan(SpanAndEntityNames spanAndEntityNames)\r\n    {\r\n        var entityNamesWithIndex = new Dictionary<int, EntityName>();\r\n        var SpanAsStringBuilder = new StringBuilder(spanAndEntityNames.Span);\r\n\r\n        var currentIdex = 0;\r\n\r\n        for (var i = 0; i < _entityNames.Length; i++)\r\n            while (true)\r\n            {\r\n                currentIdex = SpanAsStringBuilder.ToString()\r\n                    .IndexOf(_entityNames[i].EnglishName,\r\n                        currentIdex + 1); // try find index of entity name if not found its return -1\r\n                //SpanAsStringBuilder.ReplaceFromTwoIndexToNewText(0, currentIdex + _entityNames[i].EnglishName.Length,\"\"); // remove text from begining to entity name from string builder\r\n                if (currentIdex != -1) // check if found\r\n                    entityNamesWithIndex.Add(currentIdex, _entityNames[i]);\r\n                else\r\n                    break; // no more from this entity name in span\r\n            }\r\n\r\n        //create SpanAndEntityNames.entitynames again to sort correct (low index first)\r\n        return spanAndEntityNames.EntityNames = entityNamesWithIndex.OrderBy(e => e.Key).Select(e => e.Value).ToList();\r\n    }\r\n\r\n    protected string[] _SplitTextToSpans()\r\n    {\r\n        // Split\r\n        var spans = _novelText.Split(Environment.NewLine).ToList();\r\n\r\n        //Remove Empty Lines\r\n        for (var i = 0; i < spans.Count; i++)\r\n            if (spans[i] == string.Empty)\r\n                spans.RemoveAt(i);\r\n\r\n        return spans.ToArray();\r\n    }\r\n\r\n    //This Method By Ai (at its time i dont know about LastIndexOf) It was originaly in other project by me and i copy from it to use it here\r\n    protected string[] _SplitTextToSpans(int maxLength)\r\n    {\r\n        var stringList = new List<string>();\r\n\r\n        // Split the input string into substrings of maximum length 2000\r\n        while (_novelText.Length > maxLength)\r\n        {\r\n            // Find the nearest '.' character to the maximum length position\r\n            var splitPos = _novelText.LastIndexOf('.', maxLength - 1);\r\n            if (splitPos == -1)\r\n                // No '.' character found, split at the maximum length position\r\n                splitPos = maxLength;\r\n            // Add the substring to the list\r\n            stringList.Add(_novelText.Substring(0, splitPos + 1));\r\n            // Remove the substring from the input string\r\n            _novelText = _novelText.Substring(splitPos + 1);\r\n        }\r\n\r\n        // Add the remaining substring to the list\r\n        stringList.Add(_novelText);\r\n\r\n        // Convert the list to an array\r\n        return stringList.ToArray();\r\n    }\r\n\r\n    private string _GenerateTextAfterAllEdits()\r\n    {\r\n        var sb = new StringBuilder();\r\n\r\n        for (var i = 0; i < listOfSpanAndEntityNames.Count; i++) sb.AppendLine(listOfSpanAndEntityNames[i].Span);\r\n        return sb.ToString().Trim();\r\n    }\r\n\r\n    public string GetResult()\r\n    {\r\n        return _GenerateTextAfterAllEdits();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/NovelTextProcessor/Processor.cs b/NovelTextProcessor/Processor.cs
--- a/NovelTextProcessor/Processor.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/NovelTextProcessor/Processor.cs	(date 1705789619735)
@@ -1,6 +1,6 @@
-using System.Text;
 using NovelTextProcessor.Dtos;
 using NovelTextProcessor.Extensions;
+using System.Text;
 
 namespace NovelTextProcessor;
 
@@ -35,13 +35,13 @@
     private void _RestoreOriginalNames()
     {
         for (var i = 0; i < listOfSpanAndEntityNames.Count; i++)
-        for (var t = 0; t < listOfSpanAndEntityNames[i].EntityNames.Count; t++)
-            if (listOfSpanAndEntityNames[i].EntityNames[t].Gender == 'M')
-                listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span
-                    .ReplaceFirst(FixedArMaleName, listOfSpanAndEntityNames[i].EntityNames[t].ArabicName);
-            else
-                listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span
-                    .ReplaceFirst(FixedArFemaleName, listOfSpanAndEntityNames[i].EntityNames[t].ArabicName);
+            for (var t = 0; t < listOfSpanAndEntityNames[i].EntityNames.Count; t++)
+                if (listOfSpanAndEntityNames[i].EntityNames[t].Gender == 'M')
+                    listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span
+                        .ReplaceFirst(FixedArMaleName, listOfSpanAndEntityNames[i].EntityNames[t].ArabicName);
+                else
+                    listOfSpanAndEntityNames[i].Span = listOfSpanAndEntityNames[i].Span
+                        .ReplaceFirst(FixedArFemaleName, listOfSpanAndEntityNames[i].EntityNames[t].ArabicName);
     }
 
     private async Task TranslateAllSpansAsync()
Index: WebApi/Controllers/TranslateController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.AspNetCore.Mvc;\r\nusing Microsoft.IdentityModel.Tokens;\r\nusing NovelTextProcessor;\r\nusing WebApi.DTOs;\r\nusing WebApi.ObjectsMapper;\r\nusing WebApi.Services;\r\n\r\nnamespace WebApi.Controllers;\r\n\r\n[Route(\"api/[controller]\")]\r\n[ApiController]\r\npublic class TranslateController : ControllerBase\r\n{\r\n    private readonly EntityNameService _entityNameService;\r\n\r\n    public TranslateController(EntityNameService entityNameService)\r\n    {\r\n        _entityNameService = entityNameService;\r\n    }\r\n\r\n    [HttpPost(\"{novelId}\")]\r\n    public async Task<IActionResult> Translate(int novelId, [FromBody] TranslateDto data)\r\n    {\r\n        var entityNamesOfThisNovel = _entityNameService.GetEntityNamesByNovelId(novelId,true);\r\n\r\n        if (entityNamesOfThisNovel.IsNullOrEmpty())\r\n        {\r\n            return BadRequest(\"Novel Id Not Exist\");\r\n        }\r\n\r\n        var entityNamesOfThisNovelAsNovelTextProcessor = EntityNameMapper\r\n            .ConvertFromModelEntityNameArrayToNovelTextProcessorEntityNameArray(entityNamesOfThisNovel.ToArray())\r\n            .ToArray();\r\n        \r\n        var processor = new Processor(data.Text, entityNamesOfThisNovelAsNovelTextProcessor);\r\n        await processor.RunAsync();\r\n        return Ok(processor.GetResult());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Controllers/TranslateController.cs b/WebApi/Controllers/TranslateController.cs
--- a/WebApi/Controllers/TranslateController.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Controllers/TranslateController.cs	(date 1705789619834)
@@ -21,7 +21,7 @@
     [HttpPost("{novelId}")]
     public async Task<IActionResult> Translate(int novelId, [FromBody] TranslateDto data)
     {
-        var entityNamesOfThisNovel = _entityNameService.GetEntityNamesByNovelId(novelId,true);
+        var entityNamesOfThisNovel = _entityNameService.GetEntityNamesByNovelId(novelId, true);
 
         if (entityNamesOfThisNovel.IsNullOrEmpty())
         {
@@ -31,7 +31,7 @@
         var entityNamesOfThisNovelAsNovelTextProcessor = EntityNameMapper
             .ConvertFromModelEntityNameArrayToNovelTextProcessorEntityNameArray(entityNamesOfThisNovel.ToArray())
             .ToArray();
-        
+
         var processor = new Processor(data.Text, entityNamesOfThisNovelAsNovelTextProcessor);
         await processor.RunAsync();
         return Ok(processor.GetResult());
Index: NovelTextProcessor/TextTranslator.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Net;\r\nusing System.Net.Http.Headers;\r\nusing Newtonsoft.Json.Linq;\r\nusing NovelTextProcessor.Dtos;\r\nusing NovelTextProcessor.Helpers;\r\n\r\nnamespace NovelTextProcessor;\r\n\r\npublic class TextTranslator // TDO Use Paging to control Amount Of Thereds\r\n{\r\n    private readonly HttpClient httpClient;\r\n    private readonly int _maxRetry = 20;\r\n\r\n    private int _retry;\r\n\r\n    public TextTranslator()\r\n    {\r\n        httpClient = ThreadSafeHttpClientSingleton.Instance.GetHttpClient();\r\n    }\r\n\r\n    public static TextTranslator Instance { get; } = new();\r\n\r\n    public async Task<IEnumerable<string>> SendRequestsAsync(IEnumerable<string> arrayOfText)\r\n    {\r\n        var tasks = new List<Task<string>>();\r\n\r\n        foreach (var text in arrayOfText)\r\n        {\r\n            //var task = Task.Run(() => SendRequestAsync(text)); // Multi Thereds\r\n            var task = SendRequestAsync(text); // async programing without create new Thered\r\n            tasks.Add(task);\r\n        }\r\n\r\n        await Task.WhenAll(tasks);\r\n\r\n        var results = tasks.Select(task => task.Result);\r\n\r\n        return results;\r\n    }\r\n\r\n    public async Task<string> SendRequestAsync(string Text)\r\n    {\r\n        var timeTicks = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\r\n        var verifyToken = $\"webkey_E3sTuMjpP8Jez49GcYpDVH7r#{timeTicks}#{Text}\";\r\n\r\n        var hash = MD5Helper.NewMD5(verifyToken);\r\n\r\n        var requestBody = new TranslationRequestDto\r\n        {\r\n            multiline = true,\r\n            source = \"en\", //if enpty api accept any lang\r\n            target = \"ar\",\r\n            q = Text,\r\n            hints = \"\",\r\n            ts = timeTicks,\r\n            verify = hash\r\n        };\r\n\r\n        var request = new HttpRequestMessage(HttpMethod.Post, \"https://webapi.modernmt.com/translate\");\r\n\r\n        request.Headers.Add(\"authority\", \"webapi.modernmt.com\");\r\n        request.Headers.Add(\"accept\", \"application/json, text/plain, */*\");\r\n        request.Headers.Add(\"accept-language\", \"ar,en;q=0.9\");\r\n        request.Headers.Add(\"dnt\", \"1\");\r\n        request.Headers.Add(\"origin\", \"https://www.modernmt.com\");\r\n        request.Headers.Add(\"referer\", \"https://www.modernmt.com/\");\r\n        request.Headers.Add(\"sec-ch-ua\",\r\n            \"\\\"Not.A/Brand\\\";v=\\\"8\\\", \\\"Chromium\\\";v=\\\"114\\\", \\\"Google Chrome\\\";v=\\\"114\\\"\");\r\n        request.Headers.Add(\"sec-ch-ua-mobile\", \"?0\");\r\n        request.Headers.Add(\"sec-ch-ua-platform\", \"\\\"Windows\\\"\");\r\n        request.Headers.Add(\"sec-fetch-dest\", \"empty\");\r\n        request.Headers.Add(\"sec-fetch-mode\", \"cors\");\r\n        request.Headers.Add(\"sec-fetch-site\", \"same-site\");\r\n        request.Headers.Add(\"user-agent\",\r\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36\");\r\n        request.Headers.Add(\"x-http-method-override\", \"GET\");\r\n\r\n        request.Content = new StringContent(JObject.FromObject(requestBody).ToString());\r\n        request.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/json\");\r\n\r\n        try\r\n        {\r\n            var response = await httpClient.SendAsync(request);\r\n            var responseBody = await response.Content.ReadAsStringAsync();\r\n\r\n            if (response.StatusCode == HttpStatusCode.OK)\r\n            {\r\n                _retry = 0; // Reset Retry\r\n                var jsonObject = JObject.Parse(responseBody);\r\n\r\n                var translationToken = jsonObject.SelectToken(\"data.translation\")!;\r\n                return translationToken!.ToString();\r\n            }\r\n            else if (_retry >= _maxRetry)\r\n            {\r\n                return null!;\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            File.AppendAllText(\"Exception.txt\", ex.Message + Environment.NewLine);\r\n        }\r\n        finally\r\n        {\r\n            _retry++;\r\n        }\r\n\r\n        return await SendRequestAsync(Text);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/NovelTextProcessor/TextTranslator.cs b/NovelTextProcessor/TextTranslator.cs
--- a/NovelTextProcessor/TextTranslator.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/NovelTextProcessor/TextTranslator.cs	(date 1705789619745)
@@ -1,8 +1,8 @@
-using System.Net;
-using System.Net.Http.Headers;
 using Newtonsoft.Json.Linq;
 using NovelTextProcessor.Dtos;
 using NovelTextProcessor.Helpers;
+using System.Net;
+using System.Net.Http.Headers;
 
 namespace NovelTextProcessor;
 
Index: Web/Services/CharacterNameService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Net;\r\nusing System.Net.Http.Json;\r\nusing Newtonsoft.Json;\r\nusing Web.Enums;\r\nusing Web.Models;\r\n\r\nnamespace Web.Services;\r\n\r\npublic class CharacterNameService\r\n{\r\n    private readonly HttpClient _client;\r\n\r\n    public CharacterNameService(HttpClient client)\r\n    {\r\n        _client = client;\r\n    }\r\n\r\n    public async Task<EEntityNameResult> AddEntityNamesByNovelId(List<AddCharacterNameDto> characterNames,int novelId)\r\n    {\r\n        var json = new\r\n        {\r\n            entityNames = characterNames,\r\n            novelId\r\n        };\r\n        \r\n        try\r\n        {\r\n            var response = await _client.PostAsJsonAsync($\"api/EntityName\",json)!;\r\n            var responseResult = await response.Content.ReadAsStringAsync();\r\n\r\n            if (response.StatusCode == HttpStatusCode.NoContent)\r\n            {\r\n                return EEntityNameResult.Success;\r\n            } \r\n            if (responseResult.Contains(\"One Of EntityNames Or More Exist\"))\r\n            {\r\n                return EEntityNameResult.IsExist;\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return EEntityNameResult.ServerError;\r\n        }\r\n\r\n        return EEntityNameResult.AuthRequired;\r\n    }\r\n\r\n    public async Task<EEntityNameResult> RemoveEntityNameById(int entityNameId)\r\n    {\r\n        try\r\n        {\r\n            var response = await _client.DeleteAsync($\"api/EntityName/{entityNameId}\")!;\r\n            var responseResult = await response.Content.ReadAsStringAsync();\r\n\r\n            if (response.IsSuccessStatusCode)\r\n            {\r\n                return EEntityNameResult.Success;\r\n            }\r\n            if (responseResult.Contains(\"You Dont Have Permission On This Novel\"))\r\n            {\r\n                return EEntityNameResult.AuthRequired;\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return EEntityNameResult.ServerError;\r\n        }\r\n        \r\n        return EEntityNameResult.AuthRequired;\r\n    }\r\n    \r\n    public async Task<EEntityNameResult> UpdateEntityNameById(CharacterNameDto characterNameDto)\r\n    {\r\n        var json = new\r\n        {\r\n            characterNameDto.englishName,\r\n            characterNameDto.gender,\r\n            characterNameDto.arabicName\r\n        };\r\n        \r\n        try\r\n        {\r\n            var response = await _client.PutAsJsonAsync($\"api/EntityName/{characterNameDto.Id}\",json)!;\r\n            var responseResult = await response.Content.ReadAsStringAsync();\r\n\r\n            if (responseResult.Contains(\"Edited\"))\r\n            {\r\n                return EEntityNameResult.Success;\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return EEntityNameResult.ServerError;\r\n        }\r\n\r\n        return EEntityNameResult.NoPermission;\r\n    }\r\n    \r\n    public async Task<List<CharacterNameDto>> GetAllEntityNamesByNovelId(int novelId)\r\n    {\r\n        try\r\n        {\r\n            var novels = await _client.GetFromJsonAsync<CharacterNameDto[]>($\"api/EntityName/{novelId}\")!;\r\n            \r\n            if (novels != null) \r\n                return novels.ToList();\r\n\r\n            return new List<CharacterNameDto>();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return new List<CharacterNameDto>();\r\n        }\r\n    }\r\n\r\n    public async Task<string[]> ExtractEntityNamesFromText(string text)\r\n    {\r\n        var jsonText = new\r\n        {\r\n            text\r\n        };\r\n\r\n        try\r\n        {\r\n            var novels = await _client.PostAsJsonAsync(\"api/EntityName/ExtractEntityNames\", jsonText)!;\r\n            if (novels != null)\r\n            {\r\n                var responseBody = await novels.Content.ReadAsStringAsync();\r\n                return JsonConvert.DeserializeObject<string[]>(responseBody)!;\r\n            }\r\n\r\n            return Array.Empty<string>();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return Array.Empty<string>();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Web/Services/CharacterNameService.cs b/Web/Services/CharacterNameService.cs
--- a/Web/Services/CharacterNameService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/Web/Services/CharacterNameService.cs	(date 1705789620017)
@@ -1,6 +1,6 @@
+using Newtonsoft.Json;
 using System.Net;
 using System.Net.Http.Json;
-using Newtonsoft.Json;
 using Web.Enums;
 using Web.Models;
 
@@ -15,23 +15,23 @@
         _client = client;
     }
 
-    public async Task<EEntityNameResult> AddEntityNamesByNovelId(List<AddCharacterNameDto> characterNames,int novelId)
+    public async Task<EEntityNameResult> AddEntityNamesByNovelId(List<AddCharacterNameDto> characterNames, int novelId)
     {
         var json = new
         {
             entityNames = characterNames,
             novelId
         };
-        
+
         try
         {
-            var response = await _client.PostAsJsonAsync($"api/EntityName",json)!;
+            var response = await _client.PostAsJsonAsync($"api/EntityName", json)!;
             var responseResult = await response.Content.ReadAsStringAsync();
 
             if (response.StatusCode == HttpStatusCode.NoContent)
             {
                 return EEntityNameResult.Success;
-            } 
+            }
             if (responseResult.Contains("One Of EntityNames Or More Exist"))
             {
                 return EEntityNameResult.IsExist;
@@ -67,10 +67,10 @@
             Console.WriteLine($"Error : {ex.Message}");
             return EEntityNameResult.ServerError;
         }
-        
+
         return EEntityNameResult.AuthRequired;
     }
-    
+
     public async Task<EEntityNameResult> UpdateEntityNameById(CharacterNameDto characterNameDto)
     {
         var json = new
@@ -79,10 +79,10 @@
             characterNameDto.gender,
             characterNameDto.arabicName
         };
-        
+
         try
         {
-            var response = await _client.PutAsJsonAsync($"api/EntityName/{characterNameDto.Id}",json)!;
+            var response = await _client.PutAsJsonAsync($"api/EntityName/{characterNameDto.Id}", json)!;
             var responseResult = await response.Content.ReadAsStringAsync();
 
             if (responseResult.Contains("Edited"))
@@ -98,14 +98,14 @@
 
         return EEntityNameResult.NoPermission;
     }
-    
+
     public async Task<List<CharacterNameDto>> GetAllEntityNamesByNovelId(int novelId)
     {
         try
         {
             var novels = await _client.GetFromJsonAsync<CharacterNameDto[]>($"api/EntityName/{novelId}")!;
-            
-            if (novels != null) 
+
+            if (novels != null)
                 return novels.ToList();
 
             return new List<CharacterNameDto>();
Index: Web/Services/NovelService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Net;\r\nusing System.Net.Http.Headers;\r\nusing System.Net.Http.Json;\r\nusing Newtonsoft.Json.Linq;\r\nusing Web.Enums;\r\nusing Web.Models;\r\n\r\nnamespace Web.Services;\r\n\r\npublic class NovelService\r\n{\r\n    private readonly HttpClient _client;\r\n\r\n    public NovelService(HttpClient client)\r\n    {\r\n        _client = client;\r\n    }\r\n\r\n    public async Task<List<NovelDto>> GetAllNovels()\r\n    {\r\n        try\r\n        {\r\n            var novels = await _client.GetFromJsonAsync<List<NovelDto>>(\"api/Novel\")!;\r\n            \r\n            if (novels != null)\r\n                return novels;\r\n            \r\n            return new List<NovelDto>();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return new List<NovelDto>();\r\n        }\r\n    }\r\n\r\n    public async Task<ENovelResult> AddNovel(string novelName)\r\n    {\r\n        var addNovel = new\r\n        {\r\n            novelName\r\n        };\r\n\r\n        var response = await _client.PostAsJsonAsync(\"api/Novel\",addNovel)!;\r\n        \r\n        if (response.IsSuccessStatusCode)\r\n            return ENovelResult.Success;\r\n        \r\n        if (response.StatusCode == HttpStatusCode.Unauthorized)\r\n            return ENovelResult.AuthRequired;\r\n        \r\n        return ENovelResult.ServerError;\r\n    }\r\n\r\n    public async Task<ENovelResult> RemoveNovel(int novelId)\r\n    {\r\n\r\n        var response = await _client.DeleteAsync($\"api/Novel/{novelId}\")!;\r\n        var responseContent = await response.Content.ReadAsStringAsync();\r\n        \r\n        if (response.IsSuccessStatusCode)\r\n            return ENovelResult.Success;\r\n        \r\n        if (response.StatusCode == HttpStatusCode.Unauthorized)\r\n            return ENovelResult.AuthRequired;\r\n\r\n        if (responseContent.Contains(\"No Novel With This Id\"))\r\n        {\r\n            return ENovelResult.NotExist;\r\n        }\r\n        \r\n        if (responseContent.Contains(\"You Cant Delete Novel Not Created By You\"))\r\n        {\r\n            return ENovelResult.DontOwnPermission;\r\n        }\r\n        \r\n        return ENovelResult.ServerError;\r\n    }\r\n    \r\n    public async Task<string> Translate(string text,int novelId)\r\n    {\r\n        var json = new\r\n        {\r\n            text\r\n        };\r\n        \r\n        try\r\n        {\r\n            var response = await _client.PostAsJsonAsync($\"api/Translate/{novelId}\",json)!;\r\n            if (response.IsSuccessStatusCode)\r\n            {\r\n                return await response.Content.ReadAsStringAsync();\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return String.Empty;\r\n        }\r\n        return String.Empty;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Web/Services/NovelService.cs b/Web/Services/NovelService.cs
--- a/Web/Services/NovelService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/Web/Services/NovelService.cs	(date 1705789620004)
@@ -1,7 +1,5 @@
 using System.Net;
-using System.Net.Http.Headers;
 using System.Net.Http.Json;
-using Newtonsoft.Json.Linq;
 using Web.Enums;
 using Web.Models;
 
@@ -21,10 +19,10 @@
         try
         {
             var novels = await _client.GetFromJsonAsync<List<NovelDto>>("api/Novel")!;
-            
+
             if (novels != null)
                 return novels;
-            
+
             return new List<NovelDto>();
         }
         catch (Exception ex)
@@ -41,14 +39,14 @@
             novelName
         };
 
-        var response = await _client.PostAsJsonAsync("api/Novel",addNovel)!;
-        
+        var response = await _client.PostAsJsonAsync("api/Novel", addNovel)!;
+
         if (response.IsSuccessStatusCode)
             return ENovelResult.Success;
-        
+
         if (response.StatusCode == HttpStatusCode.Unauthorized)
             return ENovelResult.AuthRequired;
-        
+
         return ENovelResult.ServerError;
     }
 
@@ -57,10 +55,10 @@
 
         var response = await _client.DeleteAsync($"api/Novel/{novelId}")!;
         var responseContent = await response.Content.ReadAsStringAsync();
-        
+
         if (response.IsSuccessStatusCode)
             return ENovelResult.Success;
-        
+
         if (response.StatusCode == HttpStatusCode.Unauthorized)
             return ENovelResult.AuthRequired;
 
@@ -68,25 +66,25 @@
         {
             return ENovelResult.NotExist;
         }
-        
+
         if (responseContent.Contains("You Cant Delete Novel Not Created By You"))
         {
             return ENovelResult.DontOwnPermission;
         }
-        
+
         return ENovelResult.ServerError;
     }
-    
-    public async Task<string> Translate(string text,int novelId)
+
+    public async Task<string> Translate(string text, int novelId)
     {
         var json = new
         {
             text
         };
-        
+
         try
         {
-            var response = await _client.PostAsJsonAsync($"api/Translate/{novelId}",json)!;
+            var response = await _client.PostAsJsonAsync($"api/Translate/{novelId}", json)!;
             if (response.IsSuccessStatusCode)
             {
                 return await response.Content.ReadAsStringAsync();
Index: Web/Services/UserService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Net.Http.Json;\r\nusing Web.Models;\r\n\r\nnamespace Web.Services;\r\n\r\npublic class UserService\r\n{\r\n    private readonly HttpClient _client;\r\n\r\n    public UserService(HttpClient client)\r\n    {\r\n        _client = client;\r\n    }\r\n\r\n    public string CurrentUsername { get; set; } = string.Empty;\r\n    \r\n    public event Action<string>? OnLogin;\r\n    public event EventHandler? OnLogout;\r\n\r\n    public async Task<bool> Register(string email, string password)\r\n    {\r\n        var register = new\r\n        {\r\n            email = email,\r\n            password = password\r\n        };\r\n\r\n        var response = await _client.PostAsJsonAsync(\"/register\", register);\r\n        if (response.IsSuccessStatusCode) return true;\r\n        return false;\r\n    }\r\n\r\n    public async Task<bool> Login(string email, string password)\r\n    {\r\n        var login = new\r\n        {\r\n            email = email,\r\n            password = password\r\n        };\r\n\r\n        var response = await _client.PostAsJsonAsync(\"/login?useCookies=true\", login);\r\n        var coockies = response.Headers.Where(h => h.Key == \"Cookie\");\r\n        if (response.IsSuccessStatusCode)\r\n        {\r\n            OnLogin?.Invoke(email);\r\n            CurrentUsername = email; // email and username is same in db\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    public async Task<bool> IsAuth()\r\n    {\r\n        var response = await _client.GetAsync(\"api/Validation/IsAuth\");\r\n        if (response.IsSuccessStatusCode)\r\n        {\r\n            if (await response.Content.ReadAsStringAsync() == \"true\") return true;\r\n            return false;\r\n        }\r\n\r\n        throw new Exception(\"Server Error\");\r\n    }\r\n\r\n    public async Task<bool> LogOut()\r\n    {\r\n        var response = await _client.GetAsync(\"api/Validation/Logout\");\r\n        if (response.IsSuccessStatusCode)\r\n        {\r\n            OnLogout?.Invoke(this, EventArgs.Empty);\r\n            CurrentUsername = string.Empty; // clear on logout\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n    public async Task<string> GetCurrentEmail()\r\n    {\r\n        var response = await _client.GetAsync(\"manage/info\");\r\n        if (response.IsSuccessStatusCode)\r\n        {\r\n            var content = await response.Content.ReadFromJsonAsync<InfoDto>();\r\n            return content?.email!;\r\n        }\r\n\r\n        return string.Empty;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Web/Services/UserService.cs b/Web/Services/UserService.cs
--- a/Web/Services/UserService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/Web/Services/UserService.cs	(date 1705789620024)
@@ -13,7 +13,7 @@
     }
 
     public string CurrentUsername { get; set; } = string.Empty;
-    
+
     public event Action<string>? OnLogin;
     public event EventHandler? OnLogout;
 
@@ -74,7 +74,7 @@
 
         return false;
     }
-    
+
     public async Task<string> GetCurrentEmail()
     {
         var response = await _client.GetAsync("manage/info");
Index: Web/Services/NovelUserService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Net.Http.Json;\r\nusing Web.Enums;\r\nusing Web.Models;\r\nusing Web.Responses;\r\n\r\nnamespace Web.Services;\r\n\r\npublic class NovelUserService\r\n{\r\n    private readonly HttpClient _client;\r\n\r\n    public NovelUserService(HttpClient client)\r\n    {\r\n        _client = client;\r\n    }\r\n\r\n    public async Task<List<NovelUserDto>> GetNovelUsersByNovelId(int novelId)\r\n    {\r\n        try\r\n        {\r\n            var novels = await _client.GetFromJsonAsync<List<NovelUserDto>>($\"api/NovelUser/{novelId}\")!;\r\n            \r\n            if (novels != null)\r\n                return novels;\r\n            \r\n            return new List<NovelUserDto>();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return new List<NovelUserDto>();\r\n        }\r\n    }\r\n\r\n    public async Task<Tuple<EAddNovelUserResult,int?>> AddNovelUser(int novelId, string username)\r\n    {\r\n        var json = new\r\n        {\r\n            novelId,\r\n            username\r\n        };\r\n        \r\n        try\r\n        {\r\n            var novels = await _client.PostAsJsonAsync($\"api/NovelUser\",json)!;\r\n            var responseContent = await novels.Content.ReadFromJsonAsync<AddNovelUserResponse>();\r\n\r\n            if (responseContent!.description.Contains(\"Added\"))\r\n            {\r\n                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.Success, responseContent.id);\r\n            }\r\n            if (responseContent!.description.Contains(\"User Already Have Permission On This Novel\"))\r\n            {\r\n                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.AlreadyOwnPermission,0);\r\n            }\r\n            if (responseContent!.description.Contains(\"This Username Not Exist\"))\r\n            {\r\n                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.UsernameNotExist,0);\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.ServerError,0);\r\n        }\r\n\r\n        return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.UnknownError,0);\r\n    }\r\n    \r\n    public async Task<ERemoveNovelUser> RemoveNovelUser(int novelId,int novelUserId)\r\n    {\r\n        try\r\n        {\r\n            var novels = await _client.DeleteAsync($\"api/NovelUser/{novelId}/{novelUserId}\")!;\r\n            var responseContent = await novels.Content.ReadAsStringAsync();\r\n\r\n            if (responseContent.Contains(\"Removed\"))\r\n            {\r\n                return ERemoveNovelUser.Success;\r\n            }\r\n            \r\n            if (responseContent.Contains(\"User Already Dont Have Permission On This Novel\"))\r\n            {\r\n                return ERemoveNovelUser.AlreadyDontOwnPermission;\r\n            }\r\n            \r\n            if (responseContent.Contains(\"You Cant Remove Yourself\"))\r\n            {\r\n                return ERemoveNovelUser.OwnerTryRemoveItself;\r\n            }\r\n            \r\n            if (responseContent.Contains(\"There is No NovelUser With This Id\")) // will not happen bycouse first check in controller will return it as \"You Cant Remove Novel User If You Not Owner Of This Novel\"\r\n            {\r\n                return ERemoveNovelUser.ThisNovelUserIdNotExist;\r\n            }\r\n            \r\n            if (responseContent.Contains(\"You Cant Remove Novel User If You Not Owner Of This Novel\"))\r\n            {\r\n                return ERemoveNovelUser.NoPermission;\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine($\"Error : {ex.Message}\");\r\n            return ERemoveNovelUser.ServerError;\r\n        }\r\n\r\n        return ERemoveNovelUser.UnknownError;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Web/Services/NovelUserService.cs b/Web/Services/NovelUserService.cs
--- a/Web/Services/NovelUserService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/Web/Services/NovelUserService.cs	(date 1705789619993)
@@ -19,10 +19,10 @@
         try
         {
             var novels = await _client.GetFromJsonAsync<List<NovelUserDto>>($"api/NovelUser/{novelId}")!;
-            
+
             if (novels != null)
                 return novels;
-            
+
             return new List<NovelUserDto>();
         }
         catch (Exception ex)
@@ -32,17 +32,17 @@
         }
     }
 
-    public async Task<Tuple<EAddNovelUserResult,int?>> AddNovelUser(int novelId, string username)
+    public async Task<Tuple<EAddNovelUserResult, int?>> AddNovelUser(int novelId, string username)
     {
         var json = new
         {
             novelId,
             username
         };
-        
+
         try
         {
-            var novels = await _client.PostAsJsonAsync($"api/NovelUser",json)!;
+            var novels = await _client.PostAsJsonAsync($"api/NovelUser", json)!;
             var responseContent = await novels.Content.ReadFromJsonAsync<AddNovelUserResponse>();
 
             if (responseContent!.description.Contains("Added"))
@@ -51,23 +51,23 @@
             }
             if (responseContent!.description.Contains("User Already Have Permission On This Novel"))
             {
-                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.AlreadyOwnPermission,0);
+                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.AlreadyOwnPermission, 0);
             }
             if (responseContent!.description.Contains("This Username Not Exist"))
             {
-                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.UsernameNotExist,0);
+                return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.UsernameNotExist, 0);
             }
         }
         catch (Exception ex)
         {
             Console.WriteLine($"Error : {ex.Message}");
-            return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.ServerError,0);
+            return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.ServerError, 0);
         }
 
-        return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.UnknownError,0);
+        return new Tuple<EAddNovelUserResult, int?>(EAddNovelUserResult.UnknownError, 0);
     }
-    
-    public async Task<ERemoveNovelUser> RemoveNovelUser(int novelId,int novelUserId)
+
+    public async Task<ERemoveNovelUser> RemoveNovelUser(int novelId, int novelUserId)
     {
         try
         {
@@ -78,22 +78,22 @@
             {
                 return ERemoveNovelUser.Success;
             }
-            
+
             if (responseContent.Contains("User Already Dont Have Permission On This Novel"))
             {
                 return ERemoveNovelUser.AlreadyDontOwnPermission;
             }
-            
+
             if (responseContent.Contains("You Cant Remove Yourself"))
             {
                 return ERemoveNovelUser.OwnerTryRemoveItself;
             }
-            
+
             if (responseContent.Contains("There is No NovelUser With This Id")) // will not happen bycouse first check in controller will return it as "You Cant Remove Novel User If You Not Owner Of This Novel"
             {
                 return ERemoveNovelUser.ThisNovelUserIdNotExist;
             }
-            
+
             if (responseContent.Contains("You Cant Remove Novel User If You Not Owner Of This Novel"))
             {
                 return ERemoveNovelUser.NoPermission;
Index: WebApi/Responses/OkResponse.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Text.Json;\r\nusing Microsoft.AspNetCore.Mvc;\r\n\r\nnamespace WebApi.Responses;\r\n\r\npublic class OkResponse : Response\r\n{\r\n    protected override int StatusCode => 200;\r\n    public override string Status => \"Success\";\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Responses/OkResponse.cs b/WebApi/Responses/OkResponse.cs
--- a/WebApi/Responses/OkResponse.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Responses/OkResponse.cs	(date 1705789619967)
@@ -1,6 +1,3 @@
-using System.Text.Json;
-using Microsoft.AspNetCore.Mvc;
-
 namespace WebApi.Responses;
 
 public class OkResponse : Response
Index: WebApi/Data/CustomIdentityUser.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.ComponentModel.DataAnnotations;\r\nusing System.ComponentModel.DataAnnotations.Schema;\r\nusing Microsoft.AspNetCore.Identity;\r\n\r\nnamespace WebApi.Data;\r\n\r\npublic class CustomIdentityUser : IdentityUser<int>\r\n{\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? Email\r\n    {\r\n        get => base.Email;\r\n        set => base.Email = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? UserName\r\n    {\r\n        get => base.UserName;\r\n        set => base.UserName = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? NormalizedUserName\r\n    {\r\n        get => base.NormalizedUserName;\r\n        set => base.NormalizedUserName = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? NormalizedEmail\r\n    {\r\n        get => base.NormalizedEmail;\r\n        set => base.NormalizedEmail = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? PasswordHash\r\n    {\r\n        get => base.PasswordHash;\r\n        set => base.PasswordHash = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? PhoneNumber\r\n    {\r\n        get => base.PhoneNumber;\r\n        set => base.PhoneNumber = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? ConcurrencyStamp\r\n    {\r\n        get => base.ConcurrencyStamp;\r\n        set => base.ConcurrencyStamp = value;\r\n    }\r\n\r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public override string? SecurityStamp\r\n    {\r\n        get => base.SecurityStamp;\r\n        set => base.SecurityStamp = value;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Data/CustomIdentityUser.cs b/WebApi/Data/CustomIdentityUser.cs
--- a/WebApi/Data/CustomIdentityUser.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Data/CustomIdentityUser.cs	(date 1705789619769)
@@ -1,6 +1,6 @@
+using Microsoft.AspNetCore.Identity;
 using System.ComponentModel.DataAnnotations;
 using System.ComponentModel.DataAnnotations.Schema;
-using Microsoft.AspNetCore.Identity;
 
 namespace WebApi.Data;
 
Index: WebApi/DTOs/NovelUserDto.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace WebApi.DTOs;\r\n\r\npublic class NovelUserDto\r\n{\r\n    public int NovelId { get; set; }\r\n    public int NovelUserId { get; set; }\r\n    public required string UserName { get; set; }\r\n    \r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/DTOs/NovelUserDto.cs b/WebApi/DTOs/NovelUserDto.cs
--- a/WebApi/DTOs/NovelUserDto.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/DTOs/NovelUserDto.cs	(date 1705789619828)
@@ -5,5 +5,5 @@
     public int NovelId { get; set; }
     public int NovelUserId { get; set; }
     public required string UserName { get; set; }
-    
+
 }
\ No newline at end of file
Index: WebApi/Models/Novel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.ComponentModel.DataAnnotations;\r\nusing System.ComponentModel.DataAnnotations.Schema;\r\n\r\nnamespace WebApi.Models;\r\n\r\npublic class Novel\r\n{\r\n    public int Id { get; set; }\r\n    \r\n    [Column(TypeName = \"VARCHAR\")]\r\n    [MaxLength(256)]\r\n    public required string NovelName { get; set; } }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Models/Novel.cs b/WebApi/Models/Novel.cs
--- a/WebApi/Models/Novel.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Models/Novel.cs	(date 1705789619848)
@@ -6,7 +6,8 @@
 public class Novel
 {
     public int Id { get; set; }
-    
+
     [Column(TypeName = "VARCHAR")]
     [MaxLength(256)]
-    public required string NovelName { get; set; } }
\ No newline at end of file
+    public required string NovelName { get; set; }
+}
\ No newline at end of file
Index: WebApi/Services/EntityNameService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore;\r\nusing NovelTextProcessor;\r\nusing WebApi.Data;\r\nusing WebApi.DTOs;\r\nusing WebApi.Models;\r\n\r\nnamespace WebApi.Services;\r\n\r\npublic class EntityNameService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n\r\n    public EntityNameService(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n\r\n    public List<EntityName> GetEntityNamesByNovelId(int novelId,bool orderByLengthDescending = false)\r\n    {\r\n        if (!orderByLengthDescending)\r\n        {\r\n            return _context.EntityNames.Where(n => n.NovelId == novelId).ToList();\r\n        }\r\n        \r\n        return _context.EntityNames.Where(n => n.NovelId == novelId).OrderByDescending(n => n.EnglishName.Length).ToList();\r\n    }\r\n\r\n    public async Task<bool> AddManyEntityNames(EntityNameDto entityNameDto)\r\n    {\r\n        //Check If any EntityName Already Exist\r\n        var englishNamesToCheck = entityNameDto.EntityNames.Select(en => en.EnglishName).ToList();\r\n\r\n        var isAnyEntityNameExistBefore = await _context.EntityNames\r\n            .AnyAsync(e => englishNamesToCheck.Contains(e.EnglishName) && e.NovelId == entityNameDto.NovelId);\r\n\r\n        if (isAnyEntityNameExistBefore) // if found EntityName Exist return false\r\n            return false;\r\n\r\n        //Add EntityNames\r\n        var entityNamesTask = entityNameDto.EntityNames.Select(async e => new EntityName\r\n        {\r\n            EnglishName = e.EnglishName,\r\n            ArabicName = await TextTranslator.Instance.SendRequestAsync(e.EnglishName), // Translate English Name To Arabic\r\n            Gender = e.Gender,\r\n            NovelId = entityNameDto.NovelId\r\n        }).ToList();\r\n        \r\n        var entityNames = await Task.WhenAll(entityNamesTask);\r\n\r\n        _context.EntityNames.AddRange(entityNames);\r\n        \r\n        if (await _context.SaveChangesAsync() != 0)\r\n            return true;\r\n        \r\n        return false; // failed\r\n    }\r\n\r\n    //public async Task<int> AddEntityName(string enName, char gender, int novelId)\r\n    //{\r\n    //\tvar entityName = new EntityName()\r\n    //\t{\r\n    //\t\tEnglishName = enName,\r\n    //\t\tArabicName = await TextTranslator.Instance.SendRequestAsync(enName),\r\n    //\t\tGender = gender,\r\n    //\t\tNovelId = novelId,\r\n    //\t};\r\n\r\n    //\t_context.EntityNames.Add(entityName);\r\n    //\tif (await _context.SaveChangesAsync() != 0)\r\n    //\t{\r\n    //\t\treturn entityName.Id;\r\n    //\t}\r\n    //\treturn 0; // failed\r\n    //}\r\n\r\n    public async Task<bool> UpdateEntityName(int id, string newEnglishName,string newArabicName, char gender)\r\n    {\r\n        var entityName = _context.EntityNames.FirstOrDefault(n => n.Id == id);\r\n        \r\n        if (entityName == null) \r\n            return false;\r\n        \r\n        entityName.EnglishName = newEnglishName;\r\n        entityName.Gender = gender;\r\n        //entityName.ArabicName = await TextTranslator.Instance.SendRequestAsync(newEnglishName);\r\n        entityName.ArabicName = newArabicName;\r\n\r\n        _context.EntityNames.Update(entityName);\r\n        await _context.SaveChangesAsync();\r\n        \r\n        return true;\r\n    }\r\n\r\n    public bool DeleteEntityName(int entityNameId)\r\n    {\r\n        return _context.EntityNames.Where(e => e.Id == entityNameId).ExecuteDelete() != 0;\r\n    }\r\n\r\n    public bool CheckIfNovelUserIdsOfThisEntityNameEqualThisNovelUserId(int entityNameId, int currentAuthUserId) // note : novel can have more than 1 user but i dont add this to FrontEnd\r\n    {\r\n        var query = from entityName in _context.EntityNames\r\n            join novelUser in _context.NovelUsers on entityName.NovelId equals novelUser.NovelId\r\n            where entityName.Id == entityNameId && novelUser.UserId == currentAuthUserId\r\n            select entityName.Id;\r\n\r\n        return query.Any();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Services/EntityNameService.cs b/WebApi/Services/EntityNameService.cs
--- a/WebApi/Services/EntityNameService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Services/EntityNameService.cs	(date 1705789619944)
@@ -15,13 +15,13 @@
         _context = context;
     }
 
-    public List<EntityName> GetEntityNamesByNovelId(int novelId,bool orderByLengthDescending = false)
+    public List<EntityName> GetEntityNamesByNovelId(int novelId, bool orderByLengthDescending = false)
     {
         if (!orderByLengthDescending)
         {
             return _context.EntityNames.Where(n => n.NovelId == novelId).ToList();
         }
-        
+
         return _context.EntityNames.Where(n => n.NovelId == novelId).OrderByDescending(n => n.EnglishName.Length).ToList();
     }
 
@@ -44,14 +44,14 @@
             Gender = e.Gender,
             NovelId = entityNameDto.NovelId
         }).ToList();
-        
+
         var entityNames = await Task.WhenAll(entityNamesTask);
 
         _context.EntityNames.AddRange(entityNames);
-        
+
         if (await _context.SaveChangesAsync() != 0)
             return true;
-        
+
         return false; // failed
     }
 
@@ -73,13 +73,13 @@
     //	return 0; // failed
     //}
 
-    public async Task<bool> UpdateEntityName(int id, string newEnglishName,string newArabicName, char gender)
+    public async Task<bool> UpdateEntityName(int id, string newEnglishName, string newArabicName, char gender)
     {
         var entityName = _context.EntityNames.FirstOrDefault(n => n.Id == id);
-        
-        if (entityName == null) 
+
+        if (entityName == null)
             return false;
-        
+
         entityName.EnglishName = newEnglishName;
         entityName.Gender = gender;
         //entityName.ArabicName = await TextTranslator.Instance.SendRequestAsync(newEnglishName);
@@ -87,7 +87,7 @@
 
         _context.EntityNames.Update(entityName);
         await _context.SaveChangesAsync();
-        
+
         return true;
     }
 
@@ -99,9 +99,9 @@
     public bool CheckIfNovelUserIdsOfThisEntityNameEqualThisNovelUserId(int entityNameId, int currentAuthUserId) // note : novel can have more than 1 user but i dont add this to FrontEnd
     {
         var query = from entityName in _context.EntityNames
-            join novelUser in _context.NovelUsers on entityName.NovelId equals novelUser.NovelId
-            where entityName.Id == entityNameId && novelUser.UserId == currentAuthUserId
-            select entityName.Id;
+                    join novelUser in _context.NovelUsers on entityName.NovelId equals novelUser.NovelId
+                    where entityName.Id == entityNameId && novelUser.UserId == currentAuthUserId
+                    select entityName.Id;
 
         return query.Any();
     }
Index: WebApi/Services/NovelService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore;\r\nusing WebApi.Data;\r\nusing WebApi.DTOs;\r\nusing WebApi.Models;\r\n\r\nnamespace WebApi.Services;\r\n\r\npublic class NovelService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n    private readonly NovelUserService _novelUserService;\r\n\r\n    public NovelService(ApplicationDbContext context, NovelUserService novelUserService)\r\n    {\r\n        _context = context;\r\n        _novelUserService = novelUserService;\r\n    }\r\n\r\n    public List<NovelDto> GetAllNovels()\r\n    {\r\n        var linqQuery = from novel in _context.Novels\r\n            join novelUser in _context.NovelUsers on novel.Id equals novelUser.NovelId\r\n            where novelUser.IsOwner == true\r\n            select new NovelDto\r\n            {\r\n                Id = novel.Id,\r\n                UserId = novelUser.UserId,\r\n                UserName = novelUser.User.UserName,\r\n                Name = novel.NovelName\r\n            };\r\n        \r\n        return linqQuery.ToList();\r\n    }\r\n\r\n    public NovelDto? GetById(int id)\r\n    {\r\n        return _context.NovelUsers.Where(n => n.NovelId == id).Select(n => new NovelDto\r\n        {\r\n            Id = n.NovelId,\r\n            UserId = n.UserId,\r\n            UserName = n.User!.UserName!,\r\n            Name = n.Novel!.NovelName!\r\n        }).FirstOrDefault();\r\n    }\r\n\r\n    private async Task<Novel> _AddNovel(string novelName)\r\n    {\r\n        var novel = new Novel\r\n        {\r\n            NovelName = novelName\r\n        };\r\n\r\n        await _context.Novels.AddAsync(novel);\r\n\r\n        await _context.SaveChangesAsync();\r\n\r\n        return novel; // check if Added Successfully\r\n    }\r\n\r\n    private bool _CheckIfNovelAlreadyExistWithThisUser(string novelName, int userId)\r\n    {\r\n        if (_context.NovelUsers.Any(n => n.Novel!.NovelName == novelName && n.UserId == userId))\r\n        {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    public async Task<int> AddNovel(string novelName, int userIdWhoCreateNovel)\r\n    {\r\n\r\n        //Check If Novel Is Exist (this user already have novel with this name)\r\n        if (_CheckIfNovelAlreadyExistWithThisUser(novelName, userIdWhoCreateNovel))\r\n        {\r\n            return 0; // mean user already have novel with this name\r\n        } \r\n        //Add Novel\r\n        var novel = await _AddNovel(novelName);\r\n\r\n        //Add NovelUser as Owner\r\n        await _novelUserService.AddNovelUser(novel.Id, userIdWhoCreateNovel,true);\r\n        return novel.Id;\r\n    }\r\n\r\n    public async Task<bool> DeleteNovel(int id)\r\n    {\r\n        //Try Get Novel\r\n        var novel = _context.Novels.FirstOrDefault(n => n.Id == id);\r\n        \r\n        if (novel == null) \r\n            return false;\r\n\r\n        _context.Novels.Remove(novel); // Bycouse Cascade Delete Enabled Remove Novel Will Remove NovelUsers Too\r\n        await _context.SaveChangesAsync();\r\n        return true;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Services/NovelService.cs b/WebApi/Services/NovelService.cs
--- a/WebApi/Services/NovelService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Services/NovelService.cs	(date 1705789619799)
@@ -1,4 +1,3 @@
-using Microsoft.EntityFrameworkCore;
 using WebApi.Data;
 using WebApi.DTOs;
 using WebApi.Models;
@@ -19,16 +18,16 @@
     public List<NovelDto> GetAllNovels()
     {
         var linqQuery = from novel in _context.Novels
-            join novelUser in _context.NovelUsers on novel.Id equals novelUser.NovelId
-            where novelUser.IsOwner == true
-            select new NovelDto
-            {
-                Id = novel.Id,
-                UserId = novelUser.UserId,
-                UserName = novelUser.User.UserName,
-                Name = novel.NovelName
-            };
-        
+                        join novelUser in _context.NovelUsers on novel.Id equals novelUser.NovelId
+                        where novelUser.IsOwner == true
+                        select new NovelDto
+                        {
+                            Id = novel.Id,
+                            UserId = novelUser.UserId,
+                            UserName = novelUser.User.UserName,
+                            Name = novel.NovelName
+                        };
+
         return linqQuery.ToList();
     }
 
@@ -63,7 +62,7 @@
         {
             return true;
         }
-        
+
         return false;
     }
 
@@ -74,12 +73,12 @@
         if (_CheckIfNovelAlreadyExistWithThisUser(novelName, userIdWhoCreateNovel))
         {
             return 0; // mean user already have novel with this name
-        } 
+        }
         //Add Novel
         var novel = await _AddNovel(novelName);
 
         //Add NovelUser as Owner
-        await _novelUserService.AddNovelUser(novel.Id, userIdWhoCreateNovel,true);
+        await _novelUserService.AddNovelUser(novel.Id, userIdWhoCreateNovel, true);
         return novel.Id;
     }
 
@@ -87,8 +86,8 @@
     {
         //Try Get Novel
         var novel = _context.Novels.FirstOrDefault(n => n.Id == id);
-        
-        if (novel == null) 
+
+        if (novel == null)
             return false;
 
         _context.Novels.Remove(novel); // Bycouse Cascade Delete Enabled Remove Novel Will Remove NovelUsers Too
Index: WebApi/Migrations/20231223162545_Update_Novels_And_NovelNames.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Update_Novels_And_NovelNames : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.DropColumn(\r\n\t\t\t\tname: \"novel_Name\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.AddColumn<int>(\r\n\t\t\t\tname: \"NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"int\",\r\n\t\t\t\tnullable: true);\r\n\r\n\t\t\tmigrationBuilder.AddColumn<int>(\r\n\t\t\t\tname: \"novelNameId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"int\",\r\n\t\t\t\tnullable: false,\r\n\t\t\t\tdefaultValue: 0);\r\n\r\n\t\t\tmigrationBuilder.AddColumn<int>(\r\n\t\t\t\tname: \"userId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"int\",\r\n\t\t\t\tnullable: false,\r\n\t\t\t\tdefaultValue: 0);\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"NovelNames\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tnovelName = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_NovelNames\", x => x.Id);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_Novels_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelNamesId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_Novels_userId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"userId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_AspNetUsers_userId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"userId\",\r\n\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelNamesId\",\r\n\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\tprincipalColumn: \"Id\");\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_AspNetUsers_userId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"NovelNames\");\r\n\r\n\t\t\tmigrationBuilder.DropIndex(\r\n\t\t\t\tname: \"IX_Novels_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropIndex(\r\n\t\t\t\tname: \"IX_Novels_userId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropColumn(\r\n\t\t\t\tname: \"NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropColumn(\r\n\t\t\t\tname: \"novelNameId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropColumn(\r\n\t\t\t\tname: \"userId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.AddColumn<string>(\r\n\t\t\t\tname: \"novel_Name\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"VARCHAR(256)\",\r\n\t\t\t\tmaxLength: 256,\r\n\t\t\t\tnullable: false,\r\n\t\t\t\tdefaultValue: \"\");\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"NovelUsers\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tnovelId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tuserId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_NovelUsers\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelUsers_AspNetUsers_userId\",\r\n\t\t\t\t\t\tcolumn: x => x.userId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelUsers_Novels_novelId\",\r\n\t\t\t\t\t\tcolumn: x => x.novelId,\r\n\t\t\t\t\t\tprincipalTable: \"Novels\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_novelId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"novelId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_userId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"userId\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231223162545_Update_Novels_And_NovelNames.cs b/WebApi/Migrations/20231223162545_Update_Novels_And_NovelNames.cs
--- a/WebApi/Migrations/20231223162545_Update_Novels_And_NovelNames.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231223162545_Update_Novels_And_NovelNames.cs	(date 1705789619762)
@@ -4,155 +4,155 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Update_Novels_And_NovelNames : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropTable(
-				name: "NovelUsers");
+    /// <inheritdoc />
+    public partial class Update_Novels_And_NovelNames : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "NovelUsers");
 
-			migrationBuilder.DropColumn(
-				name: "novel_Name",
-				table: "Novels");
+            migrationBuilder.DropColumn(
+                name: "novel_Name",
+                table: "Novels");
 
-			migrationBuilder.AddColumn<int>(
-				name: "NovelNamesId",
-				table: "Novels",
-				type: "int",
-				nullable: true);
+            migrationBuilder.AddColumn<int>(
+                name: "NovelNamesId",
+                table: "Novels",
+                type: "int",
+                nullable: true);
 
-			migrationBuilder.AddColumn<int>(
-				name: "novelNameId",
-				table: "Novels",
-				type: "int",
-				nullable: false,
-				defaultValue: 0);
+            migrationBuilder.AddColumn<int>(
+                name: "novelNameId",
+                table: "Novels",
+                type: "int",
+                nullable: false,
+                defaultValue: 0);
 
-			migrationBuilder.AddColumn<int>(
-				name: "userId",
-				table: "Novels",
-				type: "int",
-				nullable: false,
-				defaultValue: 0);
+            migrationBuilder.AddColumn<int>(
+                name: "userId",
+                table: "Novels",
+                type: "int",
+                nullable: false,
+                defaultValue: 0);
 
-			migrationBuilder.CreateTable(
-				name: "NovelNames",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					novelName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_NovelNames", x => x.Id);
-				});
+            migrationBuilder.CreateTable(
+                name: "NovelNames",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    novelName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_NovelNames", x => x.Id);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_Novels_NovelNamesId",
-				table: "Novels",
-				column: "NovelNamesId");
+            migrationBuilder.CreateIndex(
+                name: "IX_Novels_NovelNamesId",
+                table: "Novels",
+                column: "NovelNamesId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_Novels_userId",
-				table: "Novels",
-				column: "userId");
+            migrationBuilder.CreateIndex(
+                name: "IX_Novels_userId",
+                table: "Novels",
+                column: "userId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_AspNetUsers_userId",
-				table: "Novels",
-				column: "userId",
-				principalTable: "AspNetUsers",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_AspNetUsers_userId",
+                table: "Novels",
+                column: "userId",
+                principalTable: "AspNetUsers",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels",
-				column: "NovelNamesId",
-				principalTable: "NovelNames",
-				principalColumn: "Id");
-		}
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels",
+                column: "NovelNamesId",
+                principalTable: "NovelNames",
+                principalColumn: "Id");
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_AspNetUsers_userId",
-				table: "Novels");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_AspNetUsers_userId",
+                table: "Novels");
 
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels");
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels");
 
-			migrationBuilder.DropTable(
-				name: "NovelNames");
+            migrationBuilder.DropTable(
+                name: "NovelNames");
 
-			migrationBuilder.DropIndex(
-				name: "IX_Novels_NovelNamesId",
-				table: "Novels");
+            migrationBuilder.DropIndex(
+                name: "IX_Novels_NovelNamesId",
+                table: "Novels");
 
-			migrationBuilder.DropIndex(
-				name: "IX_Novels_userId",
-				table: "Novels");
+            migrationBuilder.DropIndex(
+                name: "IX_Novels_userId",
+                table: "Novels");
 
-			migrationBuilder.DropColumn(
-				name: "NovelNamesId",
-				table: "Novels");
+            migrationBuilder.DropColumn(
+                name: "NovelNamesId",
+                table: "Novels");
 
-			migrationBuilder.DropColumn(
-				name: "novelNameId",
-				table: "Novels");
+            migrationBuilder.DropColumn(
+                name: "novelNameId",
+                table: "Novels");
 
-			migrationBuilder.DropColumn(
-				name: "userId",
-				table: "Novels");
+            migrationBuilder.DropColumn(
+                name: "userId",
+                table: "Novels");
 
-			migrationBuilder.AddColumn<string>(
-				name: "novel_Name",
-				table: "Novels",
-				type: "VARCHAR(256)",
-				maxLength: 256,
-				nullable: false,
-				defaultValue: "");
+            migrationBuilder.AddColumn<string>(
+                name: "novel_Name",
+                table: "Novels",
+                type: "VARCHAR(256)",
+                maxLength: 256,
+                nullable: false,
+                defaultValue: "");
 
-			migrationBuilder.CreateTable(
-				name: "NovelUsers",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					novelId = table.Column<int>(type: "int", nullable: false),
-					userId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_NovelUsers", x => x.Id);
-					table.ForeignKey(
-						name: "FK_NovelUsers_AspNetUsers_userId",
-						column: x => x.userId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-					table.ForeignKey(
-						name: "FK_NovelUsers_Novels_novelId",
-						column: x => x.novelId,
-						principalTable: "Novels",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "NovelUsers",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    novelId = table.Column<int>(type: "int", nullable: false),
+                    userId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_NovelUsers", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_NovelUsers_AspNetUsers_userId",
+                        column: x => x.userId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                    table.ForeignKey(
+                        name: "FK_NovelUsers_Novels_novelId",
+                        column: x => x.novelId,
+                        principalTable: "Novels",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelUsers_novelId",
-				table: "NovelUsers",
-				column: "novelId");
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelUsers_novelId",
+                table: "NovelUsers",
+                column: "novelId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelUsers_userId",
-				table: "NovelUsers",
-				column: "userId");
-		}
-	}
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelUsers_userId",
+                table: "NovelUsers",
+                column: "userId");
+        }
+    }
 }
Index: WebApi/Migrations/20231222233141_Create_Novel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Create_Novel : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"Novels\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tnovel_Name = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_Novels\", x => x.Id);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"NovelUsers\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tnovelId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tuserId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_NovelUsers\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelUsers_AspNetUsers_userId\",\r\n\t\t\t\t\t\tcolumn: x => x.userId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelUsers_Novels_novelId\",\r\n\t\t\t\t\t\tcolumn: x => x.novelId,\r\n\t\t\t\t\t\tprincipalTable: \"Novels\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_novelId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"novelId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_userId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"userId\");\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"Novels\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231222233141_Create_Novel.cs b/WebApi/Migrations/20231222233141_Create_Novel.cs
--- a/WebApi/Migrations/20231222233141_Create_Novel.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231222233141_Create_Novel.cs	(date 1705789619785)
@@ -4,70 +4,70 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Create_Novel : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.CreateTable(
-				name: "Novels",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					novel_Name = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_Novels", x => x.Id);
-				});
+    /// <inheritdoc />
+    public partial class Create_Novel : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "Novels",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    novel_Name = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Novels", x => x.Id);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "NovelUsers",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					novelId = table.Column<int>(type: "int", nullable: false),
-					userId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_NovelUsers", x => x.Id);
-					table.ForeignKey(
-						name: "FK_NovelUsers_AspNetUsers_userId",
-						column: x => x.userId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-					table.ForeignKey(
-						name: "FK_NovelUsers_Novels_novelId",
-						column: x => x.novelId,
-						principalTable: "Novels",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "NovelUsers",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    novelId = table.Column<int>(type: "int", nullable: false),
+                    userId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_NovelUsers", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_NovelUsers_AspNetUsers_userId",
+                        column: x => x.userId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                    table.ForeignKey(
+                        name: "FK_NovelUsers_Novels_novelId",
+                        column: x => x.novelId,
+                        principalTable: "Novels",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelUsers_novelId",
-				table: "NovelUsers",
-				column: "novelId");
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelUsers_novelId",
+                table: "NovelUsers",
+                column: "novelId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelUsers_userId",
-				table: "NovelUsers",
-				column: "userId");
-		}
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelUsers_userId",
+                table: "NovelUsers",
+                column: "userId");
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropTable(
-				name: "NovelUsers");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "NovelUsers");
 
-			migrationBuilder.DropTable(
-				name: "Novels");
-		}
-	}
+            migrationBuilder.DropTable(
+                name: "Novels");
+        }
+    }
 }
Index: WebApi/Migrations/20231225180713_Update_Novels5.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Update_Novels5 : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_Novels_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.RenameColumn(\r\n\t\t\t\tname: \"NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tnewName: \"NovelId\");\r\n\r\n\t\t\tmigrationBuilder.RenameIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tnewName: \"IX_NovelUsers_NovelId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_Novels_NovelId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"NovelId\",\r\n\t\t\t\tprincipalTable: \"Novels\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_Novels_NovelId\",\r\n\t\t\t\ttable: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.RenameColumn(\r\n\t\t\t\tname: \"NovelId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tnewName: \"NovelCloneId\");\r\n\r\n\t\t\tmigrationBuilder.RenameIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_NovelId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tnewName: \"IX_NovelUsers_NovelCloneId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_Novels_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"NovelCloneId\",\r\n\t\t\t\tprincipalTable: \"Novels\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231225180713_Update_Novels5.cs b/WebApi/Migrations/20231225180713_Update_Novels5.cs
--- a/WebApi/Migrations/20231225180713_Update_Novels5.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231225180713_Update_Novels5.cs	(date 1705789619821)
@@ -4,59 +4,59 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Update_Novels5 : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_NovelUsers_Novels_NovelCloneId",
-				table: "NovelUsers");
+    /// <inheritdoc />
+    public partial class Update_Novels5 : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_NovelUsers_Novels_NovelCloneId",
+                table: "NovelUsers");
 
-			migrationBuilder.RenameColumn(
-				name: "NovelCloneId",
-				table: "NovelUsers",
-				newName: "NovelId");
+            migrationBuilder.RenameColumn(
+                name: "NovelCloneId",
+                table: "NovelUsers",
+                newName: "NovelId");
 
-			migrationBuilder.RenameIndex(
-				name: "IX_NovelUsers_NovelCloneId",
-				table: "NovelUsers",
-				newName: "IX_NovelUsers_NovelId");
+            migrationBuilder.RenameIndex(
+                name: "IX_NovelUsers_NovelCloneId",
+                table: "NovelUsers",
+                newName: "IX_NovelUsers_NovelId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_NovelUsers_Novels_NovelId",
-				table: "NovelUsers",
-				column: "NovelId",
-				principalTable: "Novels",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
+            migrationBuilder.AddForeignKey(
+                name: "FK_NovelUsers_Novels_NovelId",
+                table: "NovelUsers",
+                column: "NovelId",
+                principalTable: "Novels",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_NovelUsers_Novels_NovelId",
-				table: "NovelUsers");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_NovelUsers_Novels_NovelId",
+                table: "NovelUsers");
 
-			migrationBuilder.RenameColumn(
-				name: "NovelId",
-				table: "NovelUsers",
-				newName: "NovelCloneId");
+            migrationBuilder.RenameColumn(
+                name: "NovelId",
+                table: "NovelUsers",
+                newName: "NovelCloneId");
 
-			migrationBuilder.RenameIndex(
-				name: "IX_NovelUsers_NovelId",
-				table: "NovelUsers",
-				newName: "IX_NovelUsers_NovelCloneId");
+            migrationBuilder.RenameIndex(
+                name: "IX_NovelUsers_NovelId",
+                table: "NovelUsers",
+                newName: "IX_NovelUsers_NovelCloneId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_NovelUsers_Novels_NovelCloneId",
-				table: "NovelUsers",
-				column: "NovelCloneId",
-				principalTable: "Novels",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
-	}
+            migrationBuilder.AddForeignKey(
+                name: "FK_NovelUsers_Novels_NovelCloneId",
+                table: "NovelUsers",
+                column: "NovelCloneId",
+                principalTable: "Novels",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
+    }
 }
Index: WebApi/Migrations/20231223192255_Update_Novels3.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Update_Novels3 : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"NovelUsers\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tNovelCloneId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tUserId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_NovelUsers\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelUsers_AspNetUsers_UserId\",\r\n\t\t\t\t\t\tcolumn: x => x.UserId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelUsers_NovelClones_NovelCloneId\",\r\n\t\t\t\t\t\tcolumn: x => x.NovelCloneId,\r\n\t\t\t\t\t\tprincipalTable: \"NovelClones\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"NovelCloneId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelUsers_UserId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"UserId\");\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"Novels\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tNovelCloneId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tUserId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_Novels\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_Novels_AspNetUsers_UserId\",\r\n\t\t\t\t\t\tcolumn: x => x.UserId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_Novels_NovelClones_NovelCloneId\",\r\n\t\t\t\t\t\tcolumn: x => x.NovelCloneId,\r\n\t\t\t\t\t\tprincipalTable: \"NovelClones\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_Novels_NovelCloneId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelCloneId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_Novels_UserId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"UserId\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231223192255_Update_Novels3.cs b/WebApi/Migrations/20231223192255_Update_Novels3.cs
--- a/WebApi/Migrations/20231223192255_Update_Novels3.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231223192255_Update_Novels3.cs	(date 1705789619868)
@@ -4,93 +4,93 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Update_Novels3 : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropTable(
-				name: "Novels");
+    /// <inheritdoc />
+    public partial class Update_Novels3 : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "Novels");
 
-			migrationBuilder.CreateTable(
-				name: "NovelUsers",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					NovelCloneId = table.Column<int>(type: "int", nullable: false),
-					UserId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_NovelUsers", x => x.Id);
-					table.ForeignKey(
-						name: "FK_NovelUsers_AspNetUsers_UserId",
-						column: x => x.UserId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-					table.ForeignKey(
-						name: "FK_NovelUsers_NovelClones_NovelCloneId",
-						column: x => x.NovelCloneId,
-						principalTable: "NovelClones",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "NovelUsers",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    NovelCloneId = table.Column<int>(type: "int", nullable: false),
+                    UserId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_NovelUsers", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_NovelUsers_AspNetUsers_UserId",
+                        column: x => x.UserId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                    table.ForeignKey(
+                        name: "FK_NovelUsers_NovelClones_NovelCloneId",
+                        column: x => x.NovelCloneId,
+                        principalTable: "NovelClones",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelUsers_NovelCloneId",
-				table: "NovelUsers",
-				column: "NovelCloneId");
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelUsers_NovelCloneId",
+                table: "NovelUsers",
+                column: "NovelCloneId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelUsers_UserId",
-				table: "NovelUsers",
-				column: "UserId");
-		}
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelUsers_UserId",
+                table: "NovelUsers",
+                column: "UserId");
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropTable(
-				name: "NovelUsers");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "NovelUsers");
 
-			migrationBuilder.CreateTable(
-				name: "Novels",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					NovelCloneId = table.Column<int>(type: "int", nullable: false),
-					UserId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_Novels", x => x.Id);
-					table.ForeignKey(
-						name: "FK_Novels_AspNetUsers_UserId",
-						column: x => x.UserId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-					table.ForeignKey(
-						name: "FK_Novels_NovelClones_NovelCloneId",
-						column: x => x.NovelCloneId,
-						principalTable: "NovelClones",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "Novels",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    NovelCloneId = table.Column<int>(type: "int", nullable: false),
+                    UserId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Novels", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_Novels_AspNetUsers_UserId",
+                        column: x => x.UserId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                    table.ForeignKey(
+                        name: "FK_Novels_NovelClones_NovelCloneId",
+                        column: x => x.NovelCloneId,
+                        principalTable: "NovelClones",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_Novels_NovelCloneId",
-				table: "Novels",
-				column: "NovelCloneId");
+            migrationBuilder.CreateIndex(
+                name: "IX_Novels_NovelCloneId",
+                table: "Novels",
+                column: "NovelCloneId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_Novels_UserId",
-				table: "Novels",
-				column: "UserId");
-		}
-	}
+            migrationBuilder.CreateIndex(
+                name: "IX_Novels_UserId",
+                table: "Novels",
+                column: "UserId");
+        }
+    }
 }
Index: WebApi/Migrations/20231223163544_Update_Novels.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Update_Novels : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropColumn(\r\n\t\t\t\tname: \"novelNameId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.AlterColumn<int>(\r\n\t\t\t\tname: \"NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"int\",\r\n\t\t\t\tnullable: false,\r\n\t\t\t\tdefaultValue: 0,\r\n\t\t\t\toldClrType: typeof(int),\r\n\t\t\t\toldType: \"int\",\r\n\t\t\t\toldNullable: true);\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelNamesId\",\r\n\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.AlterColumn<int>(\r\n\t\t\t\tname: \"NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"int\",\r\n\t\t\t\tnullable: true,\r\n\t\t\t\toldClrType: typeof(int),\r\n\t\t\t\toldType: \"int\");\r\n\r\n\t\t\tmigrationBuilder.AddColumn<int>(\r\n\t\t\t\tname: \"novelNameId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\ttype: \"int\",\r\n\t\t\t\tnullable: false,\r\n\t\t\t\tdefaultValue: 0);\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelNamesId\",\r\n\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\tprincipalColumn: \"Id\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231223163544_Update_Novels.cs b/WebApi/Migrations/20231223163544_Update_Novels.cs
--- a/WebApi/Migrations/20231223163544_Update_Novels.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231223163544_Update_Novels.cs	(date 1705789619776)
@@ -4,67 +4,67 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Update_Novels : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels");
+    /// <inheritdoc />
+    public partial class Update_Novels : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels");
 
-			migrationBuilder.DropColumn(
-				name: "novelNameId",
-				table: "Novels");
+            migrationBuilder.DropColumn(
+                name: "novelNameId",
+                table: "Novels");
 
-			migrationBuilder.AlterColumn<int>(
-				name: "NovelNamesId",
-				table: "Novels",
-				type: "int",
-				nullable: false,
-				defaultValue: 0,
-				oldClrType: typeof(int),
-				oldType: "int",
-				oldNullable: true);
+            migrationBuilder.AlterColumn<int>(
+                name: "NovelNamesId",
+                table: "Novels",
+                type: "int",
+                nullable: false,
+                defaultValue: 0,
+                oldClrType: typeof(int),
+                oldType: "int",
+                oldNullable: true);
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels",
-				column: "NovelNamesId",
-				principalTable: "NovelNames",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels",
+                column: "NovelNamesId",
+                principalTable: "NovelNames",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels");
 
-			migrationBuilder.AlterColumn<int>(
-				name: "NovelNamesId",
-				table: "Novels",
-				type: "int",
-				nullable: true,
-				oldClrType: typeof(int),
-				oldType: "int");
+            migrationBuilder.AlterColumn<int>(
+                name: "NovelNamesId",
+                table: "Novels",
+                type: "int",
+                nullable: true,
+                oldClrType: typeof(int),
+                oldType: "int");
 
-			migrationBuilder.AddColumn<int>(
-				name: "novelNameId",
-				table: "Novels",
-				type: "int",
-				nullable: false,
-				defaultValue: 0);
+            migrationBuilder.AddColumn<int>(
+                name: "novelNameId",
+                table: "Novels",
+                type: "int",
+                nullable: false,
+                defaultValue: 0);
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels",
-				column: "NovelNamesId",
-				principalTable: "NovelNames",
-				principalColumn: "Id");
-		}
-	}
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels",
+                column: "NovelNamesId",
+                principalTable: "NovelNames",
+                principalColumn: "Id");
+        }
+    }
 }
Index: WebApi/Migrations/20231222220540_First.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class First : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetRoles\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tName = table.Column<string>(type: \"nvarchar(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tNormalizedName = table.Column<string>(type: \"nvarchar(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tConcurrencyStamp = table.Column<string>(type: \"nvarchar(max)\", nullable: true)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetRoles\", x => x.Id);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetUsers\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tEmail = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tUserName = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tNormalizedUserName = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tNormalizedEmail = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tPasswordHash = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tPhoneNumber = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tConcurrencyStamp = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tSecurityStamp = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: true),\r\n\t\t\t\t\tEmailConfirmed = table.Column<bool>(type: \"bit\", nullable: false),\r\n\t\t\t\t\tPhoneNumberConfirmed = table.Column<bool>(type: \"bit\", nullable: false),\r\n\t\t\t\t\tTwoFactorEnabled = table.Column<bool>(type: \"bit\", nullable: false),\r\n\t\t\t\t\tLockoutEnd = table.Column<DateTimeOffset>(type: \"datetimeoffset\", nullable: true),\r\n\t\t\t\t\tLockoutEnabled = table.Column<bool>(type: \"bit\", nullable: false),\r\n\t\t\t\t\tAccessFailedCount = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetUsers\", x => x.Id);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetRoleClaims\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tRoleId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tClaimType = table.Column<string>(type: \"nvarchar(max)\", nullable: true),\r\n\t\t\t\t\tClaimValue = table.Column<string>(type: \"nvarchar(max)\", nullable: true)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetRoleClaims\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_AspNetRoleClaims_AspNetRoles_RoleId\",\r\n\t\t\t\t\t\tcolumn: x => x.RoleId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetRoles\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetUserClaims\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tUserId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tClaimType = table.Column<string>(type: \"nvarchar(max)\", nullable: true),\r\n\t\t\t\t\tClaimValue = table.Column<string>(type: \"nvarchar(max)\", nullable: true)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetUserClaims\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_AspNetUserClaims_AspNetUsers_UserId\",\r\n\t\t\t\t\t\tcolumn: x => x.UserId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetUserLogins\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tLoginProvider = table.Column<string>(type: \"nvarchar(450)\", nullable: false),\r\n\t\t\t\t\tProviderKey = table.Column<string>(type: \"nvarchar(450)\", nullable: false),\r\n\t\t\t\t\tProviderDisplayName = table.Column<string>(type: \"nvarchar(max)\", nullable: true),\r\n\t\t\t\t\tUserId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetUserLogins\", x => new { x.LoginProvider, x.ProviderKey });\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_AspNetUserLogins_AspNetUsers_UserId\",\r\n\t\t\t\t\t\tcolumn: x => x.UserId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetUserRoles\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tUserId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tRoleId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetUserRoles\", x => new { x.UserId, x.RoleId });\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_AspNetUserRoles_AspNetRoles_RoleId\",\r\n\t\t\t\t\t\tcolumn: x => x.RoleId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetRoles\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_AspNetUserRoles_AspNetUsers_UserId\",\r\n\t\t\t\t\t\tcolumn: x => x.UserId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"AspNetUserTokens\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tUserId = table.Column<int>(type: \"int\", nullable: false),\r\n\t\t\t\t\tLoginProvider = table.Column<string>(type: \"nvarchar(450)\", nullable: false),\r\n\t\t\t\t\tName = table.Column<string>(type: \"nvarchar(450)\", nullable: false),\r\n\t\t\t\t\tValue = table.Column<string>(type: \"nvarchar(max)\", nullable: true)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_AspNetUserTokens\", x => new { x.UserId, x.LoginProvider, x.Name });\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_AspNetUserTokens_AspNetUsers_UserId\",\r\n\t\t\t\t\t\tcolumn: x => x.UserId,\r\n\t\t\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_AspNetRoleClaims_RoleId\",\r\n\t\t\t\ttable: \"AspNetRoleClaims\",\r\n\t\t\t\tcolumn: \"RoleId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"RoleNameIndex\",\r\n\t\t\t\ttable: \"AspNetRoles\",\r\n\t\t\t\tcolumn: \"NormalizedName\",\r\n\t\t\t\tunique: true,\r\n\t\t\t\tfilter: \"[NormalizedName] IS NOT NULL\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_AspNetUserClaims_UserId\",\r\n\t\t\t\ttable: \"AspNetUserClaims\",\r\n\t\t\t\tcolumn: \"UserId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_AspNetUserLogins_UserId\",\r\n\t\t\t\ttable: \"AspNetUserLogins\",\r\n\t\t\t\tcolumn: \"UserId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_AspNetUserRoles_RoleId\",\r\n\t\t\t\ttable: \"AspNetUserRoles\",\r\n\t\t\t\tcolumn: \"RoleId\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"EmailIndex\",\r\n\t\t\t\ttable: \"AspNetUsers\",\r\n\t\t\t\tcolumn: \"NormalizedEmail\");\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"UserNameIndex\",\r\n\t\t\t\ttable: \"AspNetUsers\",\r\n\t\t\t\tcolumn: \"NormalizedUserName\",\r\n\t\t\t\tunique: true,\r\n\t\t\t\tfilter: \"[NormalizedUserName] IS NOT NULL\");\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetRoleClaims\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetUserClaims\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetUserLogins\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetUserRoles\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetUserTokens\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetRoles\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"AspNetUsers\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231222220540_First.cs b/WebApi/Migrations/20231222220540_First.cs
--- a/WebApi/Migrations/20231222220540_First.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231222220540_First.cs	(date 1705789619791)
@@ -4,222 +4,222 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class First : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.CreateTable(
-				name: "AspNetRoles",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-					NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
-					ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetRoles", x => x.Id);
-				});
+    /// <inheritdoc />
+    public partial class First : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "AspNetRoles",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
+                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
+                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "AspNetUsers",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					Email = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					UserName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					NormalizedUserName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					NormalizedEmail = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					PasswordHash = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					PhoneNumber = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					ConcurrencyStamp = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					SecurityStamp = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
-					EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
-					PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
-					TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
-					LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
-					LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
-					AccessFailedCount = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetUsers", x => x.Id);
-				});
+            migrationBuilder.CreateTable(
+                name: "AspNetUsers",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    Email = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    UserName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    NormalizedUserName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    NormalizedEmail = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    PasswordHash = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    PhoneNumber = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    ConcurrencyStamp = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    SecurityStamp = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: true),
+                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
+                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
+                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
+                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
+                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
+                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "AspNetRoleClaims",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					RoleId = table.Column<int>(type: "int", nullable: false),
-					ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
-					ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
-					table.ForeignKey(
-						name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
-						column: x => x.RoleId,
-						principalTable: "AspNetRoles",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "AspNetRoleClaims",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    RoleId = table.Column<int>(type: "int", nullable: false),
+                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
+                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
+                        column: x => x.RoleId,
+                        principalTable: "AspNetRoles",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "AspNetUserClaims",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					UserId = table.Column<int>(type: "int", nullable: false),
-					ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
-					ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
-					table.ForeignKey(
-						name: "FK_AspNetUserClaims_AspNetUsers_UserId",
-						column: x => x.UserId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "AspNetUserClaims",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    UserId = table.Column<int>(type: "int", nullable: false),
+                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
+                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
+                        column: x => x.UserId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "AspNetUserLogins",
-				columns: table => new
-				{
-					LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
-					ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
-					ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
-					UserId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
-					table.ForeignKey(
-						name: "FK_AspNetUserLogins_AspNetUsers_UserId",
-						column: x => x.UserId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "AspNetUserLogins",
+                columns: table => new
+                {
+                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
+                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
+                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
+                    UserId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
+                    table.ForeignKey(
+                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
+                        column: x => x.UserId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "AspNetUserRoles",
-				columns: table => new
-				{
-					UserId = table.Column<int>(type: "int", nullable: false),
-					RoleId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
-					table.ForeignKey(
-						name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
-						column: x => x.RoleId,
-						principalTable: "AspNetRoles",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-					table.ForeignKey(
-						name: "FK_AspNetUserRoles_AspNetUsers_UserId",
-						column: x => x.UserId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "AspNetUserRoles",
+                columns: table => new
+                {
+                    UserId = table.Column<int>(type: "int", nullable: false),
+                    RoleId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
+                    table.ForeignKey(
+                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
+                        column: x => x.RoleId,
+                        principalTable: "AspNetRoles",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                    table.ForeignKey(
+                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
+                        column: x => x.UserId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateTable(
-				name: "AspNetUserTokens",
-				columns: table => new
-				{
-					UserId = table.Column<int>(type: "int", nullable: false),
-					LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
-					Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
-					Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
-					table.ForeignKey(
-						name: "FK_AspNetUserTokens_AspNetUsers_UserId",
-						column: x => x.UserId,
-						principalTable: "AspNetUsers",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "AspNetUserTokens",
+                columns: table => new
+                {
+                    UserId = table.Column<int>(type: "int", nullable: false),
+                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
+                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
+                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
+                    table.ForeignKey(
+                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
+                        column: x => x.UserId,
+                        principalTable: "AspNetUsers",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_AspNetRoleClaims_RoleId",
-				table: "AspNetRoleClaims",
-				column: "RoleId");
+            migrationBuilder.CreateIndex(
+                name: "IX_AspNetRoleClaims_RoleId",
+                table: "AspNetRoleClaims",
+                column: "RoleId");
 
-			migrationBuilder.CreateIndex(
-				name: "RoleNameIndex",
-				table: "AspNetRoles",
-				column: "NormalizedName",
-				unique: true,
-				filter: "[NormalizedName] IS NOT NULL");
+            migrationBuilder.CreateIndex(
+                name: "RoleNameIndex",
+                table: "AspNetRoles",
+                column: "NormalizedName",
+                unique: true,
+                filter: "[NormalizedName] IS NOT NULL");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_AspNetUserClaims_UserId",
-				table: "AspNetUserClaims",
-				column: "UserId");
+            migrationBuilder.CreateIndex(
+                name: "IX_AspNetUserClaims_UserId",
+                table: "AspNetUserClaims",
+                column: "UserId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_AspNetUserLogins_UserId",
-				table: "AspNetUserLogins",
-				column: "UserId");
+            migrationBuilder.CreateIndex(
+                name: "IX_AspNetUserLogins_UserId",
+                table: "AspNetUserLogins",
+                column: "UserId");
 
-			migrationBuilder.CreateIndex(
-				name: "IX_AspNetUserRoles_RoleId",
-				table: "AspNetUserRoles",
-				column: "RoleId");
+            migrationBuilder.CreateIndex(
+                name: "IX_AspNetUserRoles_RoleId",
+                table: "AspNetUserRoles",
+                column: "RoleId");
 
-			migrationBuilder.CreateIndex(
-				name: "EmailIndex",
-				table: "AspNetUsers",
-				column: "NormalizedEmail");
+            migrationBuilder.CreateIndex(
+                name: "EmailIndex",
+                table: "AspNetUsers",
+                column: "NormalizedEmail");
 
-			migrationBuilder.CreateIndex(
-				name: "UserNameIndex",
-				table: "AspNetUsers",
-				column: "NormalizedUserName",
-				unique: true,
-				filter: "[NormalizedUserName] IS NOT NULL");
-		}
+            migrationBuilder.CreateIndex(
+                name: "UserNameIndex",
+                table: "AspNetUsers",
+                column: "NormalizedUserName",
+                unique: true,
+                filter: "[NormalizedUserName] IS NOT NULL");
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropTable(
-				name: "AspNetRoleClaims");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "AspNetRoleClaims");
 
-			migrationBuilder.DropTable(
-				name: "AspNetUserClaims");
+            migrationBuilder.DropTable(
+                name: "AspNetUserClaims");
 
-			migrationBuilder.DropTable(
-				name: "AspNetUserLogins");
+            migrationBuilder.DropTable(
+                name: "AspNetUserLogins");
 
-			migrationBuilder.DropTable(
-				name: "AspNetUserRoles");
+            migrationBuilder.DropTable(
+                name: "AspNetUserRoles");
 
-			migrationBuilder.DropTable(
-				name: "AspNetUserTokens");
+            migrationBuilder.DropTable(
+                name: "AspNetUserTokens");
 
-			migrationBuilder.DropTable(
-				name: "AspNetRoles");
+            migrationBuilder.DropTable(
+                name: "AspNetRoles");
 
-			migrationBuilder.DropTable(
-				name: "AspNetUsers");
-		}
-	}
+            migrationBuilder.DropTable(
+                name: "AspNetUsers");
+        }
+    }
 }
Index: WebApi/Migrations/20231225180256_Update_Novels4.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Update_Novels4 : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_NovelClones_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"NovelClones\");\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"Novels\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tNovelNameId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_Novels\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_Novels_NovelNames_NovelNameId\",\r\n\t\t\t\t\t\tcolumn: x => x.NovelNameId,\r\n\t\t\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_Novels_NovelNameId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelNameId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_Novels_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"NovelCloneId\",\r\n\t\t\t\tprincipalTable: \"Novels\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_Novels_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"NovelClones\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tNovelNameId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_NovelClones\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelClones_NovelNames_NovelNameId\",\r\n\t\t\t\t\t\tcolumn: x => x.NovelNameId,\r\n\t\t\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelClones_NovelNameId\",\r\n\t\t\t\ttable: \"NovelClones\",\r\n\t\t\t\tcolumn: \"NovelNameId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_NovelUsers_NovelClones_NovelCloneId\",\r\n\t\t\t\ttable: \"NovelUsers\",\r\n\t\t\t\tcolumn: \"NovelCloneId\",\r\n\t\t\t\tprincipalTable: \"NovelClones\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231225180256_Update_Novels4.cs b/WebApi/Migrations/20231225180256_Update_Novels4.cs
--- a/WebApi/Migrations/20231225180256_Update_Novels4.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231225180256_Update_Novels4.cs	(date 1705789619854)
@@ -4,93 +4,93 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Update_Novels4 : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_NovelUsers_NovelClones_NovelCloneId",
-				table: "NovelUsers");
+    /// <inheritdoc />
+    public partial class Update_Novels4 : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_NovelUsers_NovelClones_NovelCloneId",
+                table: "NovelUsers");
 
-			migrationBuilder.DropTable(
-				name: "NovelClones");
+            migrationBuilder.DropTable(
+                name: "NovelClones");
 
-			migrationBuilder.CreateTable(
-				name: "Novels",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					NovelNameId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_Novels", x => x.Id);
-					table.ForeignKey(
-						name: "FK_Novels_NovelNames_NovelNameId",
-						column: x => x.NovelNameId,
-						principalTable: "NovelNames",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "Novels",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    NovelNameId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Novels", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_Novels_NovelNames_NovelNameId",
+                        column: x => x.NovelNameId,
+                        principalTable: "NovelNames",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_Novels_NovelNameId",
-				table: "Novels",
-				column: "NovelNameId");
+            migrationBuilder.CreateIndex(
+                name: "IX_Novels_NovelNameId",
+                table: "Novels",
+                column: "NovelNameId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_NovelUsers_Novels_NovelCloneId",
-				table: "NovelUsers",
-				column: "NovelCloneId",
-				principalTable: "Novels",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
+            migrationBuilder.AddForeignKey(
+                name: "FK_NovelUsers_Novels_NovelCloneId",
+                table: "NovelUsers",
+                column: "NovelCloneId",
+                principalTable: "Novels",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_NovelUsers_Novels_NovelCloneId",
-				table: "NovelUsers");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_NovelUsers_Novels_NovelCloneId",
+                table: "NovelUsers");
 
-			migrationBuilder.DropTable(
-				name: "Novels");
+            migrationBuilder.DropTable(
+                name: "Novels");
 
-			migrationBuilder.CreateTable(
-				name: "NovelClones",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					NovelNameId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_NovelClones", x => x.Id);
-					table.ForeignKey(
-						name: "FK_NovelClones_NovelNames_NovelNameId",
-						column: x => x.NovelNameId,
-						principalTable: "NovelNames",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "NovelClones",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    NovelNameId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_NovelClones", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_NovelClones_NovelNames_NovelNameId",
+                        column: x => x.NovelNameId,
+                        principalTable: "NovelNames",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelClones_NovelNameId",
-				table: "NovelClones",
-				column: "NovelNameId");
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelClones_NovelNameId",
+                table: "NovelClones",
+                column: "NovelNameId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_NovelUsers_NovelClones_NovelCloneId",
-				table: "NovelUsers",
-				column: "NovelCloneId",
-				principalTable: "NovelClones",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
-	}
+            migrationBuilder.AddForeignKey(
+                name: "FK_NovelUsers_NovelClones_NovelCloneId",
+                table: "NovelUsers",
+                column: "NovelCloneId",
+                principalTable: "NovelClones",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
+    }
 }
Index: WebApi/Migrations/20231223182709_Update_Novels2.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Update_Novels2 : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_AspNetUsers_userId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.RenameColumn(\r\n\t\t\t\tname: \"userId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"UserId\");\r\n\r\n\t\t\tmigrationBuilder.RenameColumn(\r\n\t\t\t\tname: \"NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"NovelCloneId\");\r\n\r\n\t\t\tmigrationBuilder.RenameIndex(\r\n\t\t\t\tname: \"IX_Novels_userId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"IX_Novels_UserId\");\r\n\r\n\t\t\tmigrationBuilder.RenameIndex(\r\n\t\t\t\tname: \"IX_Novels_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"IX_Novels_NovelCloneId\");\r\n\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"NovelClones\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tNovelNameId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_NovelClones\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_NovelClones_NovelNames_NovelNameId\",\r\n\t\t\t\t\t\tcolumn: x => x.NovelNameId,\r\n\t\t\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_NovelClones_NovelNameId\",\r\n\t\t\t\ttable: \"NovelClones\",\r\n\t\t\t\tcolumn: \"NovelNameId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_AspNetUsers_UserId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"UserId\",\r\n\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelClones_NovelCloneId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelCloneId\",\r\n\t\t\t\tprincipalTable: \"NovelClones\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_AspNetUsers_UserId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelClones_NovelCloneId\",\r\n\t\t\t\ttable: \"Novels\");\r\n\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"NovelClones\");\r\n\r\n\t\t\tmigrationBuilder.RenameColumn(\r\n\t\t\t\tname: \"UserId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"userId\");\r\n\r\n\t\t\tmigrationBuilder.RenameColumn(\r\n\t\t\t\tname: \"NovelCloneId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"NovelNamesId\");\r\n\r\n\t\t\tmigrationBuilder.RenameIndex(\r\n\t\t\t\tname: \"IX_Novels_UserId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"IX_Novels_userId\");\r\n\r\n\t\t\tmigrationBuilder.RenameIndex(\r\n\t\t\t\tname: \"IX_Novels_NovelCloneId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tnewName: \"IX_Novels_NovelNamesId\");\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_AspNetUsers_userId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"userId\",\r\n\t\t\t\tprincipalTable: \"AspNetUsers\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\r\n\t\t\tmigrationBuilder.AddForeignKey(\r\n\t\t\t\tname: \"FK_Novels_NovelNames_NovelNamesId\",\r\n\t\t\t\ttable: \"Novels\",\r\n\t\t\t\tcolumn: \"NovelNamesId\",\r\n\t\t\t\tprincipalTable: \"NovelNames\",\r\n\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231223182709_Update_Novels2.cs b/WebApi/Migrations/20231223182709_Update_Novels2.cs
--- a/WebApi/Migrations/20231223182709_Update_Novels2.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231223182709_Update_Novels2.cs	(date 1705789619874)
@@ -4,130 +4,130 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Update_Novels2 : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_AspNetUsers_userId",
-				table: "Novels");
+    /// <inheritdoc />
+    public partial class Update_Novels2 : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_AspNetUsers_userId",
+                table: "Novels");
 
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels");
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels");
 
-			migrationBuilder.RenameColumn(
-				name: "userId",
-				table: "Novels",
-				newName: "UserId");
+            migrationBuilder.RenameColumn(
+                name: "userId",
+                table: "Novels",
+                newName: "UserId");
 
-			migrationBuilder.RenameColumn(
-				name: "NovelNamesId",
-				table: "Novels",
-				newName: "NovelCloneId");
+            migrationBuilder.RenameColumn(
+                name: "NovelNamesId",
+                table: "Novels",
+                newName: "NovelCloneId");
 
-			migrationBuilder.RenameIndex(
-				name: "IX_Novels_userId",
-				table: "Novels",
-				newName: "IX_Novels_UserId");
+            migrationBuilder.RenameIndex(
+                name: "IX_Novels_userId",
+                table: "Novels",
+                newName: "IX_Novels_UserId");
 
-			migrationBuilder.RenameIndex(
-				name: "IX_Novels_NovelNamesId",
-				table: "Novels",
-				newName: "IX_Novels_NovelCloneId");
+            migrationBuilder.RenameIndex(
+                name: "IX_Novels_NovelNamesId",
+                table: "Novels",
+                newName: "IX_Novels_NovelCloneId");
 
-			migrationBuilder.CreateTable(
-				name: "NovelClones",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					NovelNameId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_NovelClones", x => x.Id);
-					table.ForeignKey(
-						name: "FK_NovelClones_NovelNames_NovelNameId",
-						column: x => x.NovelNameId,
-						principalTable: "NovelNames",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+            migrationBuilder.CreateTable(
+                name: "NovelClones",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    NovelNameId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_NovelClones", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_NovelClones_NovelNames_NovelNameId",
+                        column: x => x.NovelNameId,
+                        principalTable: "NovelNames",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_NovelClones_NovelNameId",
-				table: "NovelClones",
-				column: "NovelNameId");
+            migrationBuilder.CreateIndex(
+                name: "IX_NovelClones_NovelNameId",
+                table: "NovelClones",
+                column: "NovelNameId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_AspNetUsers_UserId",
-				table: "Novels",
-				column: "UserId",
-				principalTable: "AspNetUsers",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_AspNetUsers_UserId",
+                table: "Novels",
+                column: "UserId",
+                principalTable: "AspNetUsers",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_NovelClones_NovelCloneId",
-				table: "Novels",
-				column: "NovelCloneId",
-				principalTable: "NovelClones",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_NovelClones_NovelCloneId",
+                table: "Novels",
+                column: "NovelCloneId",
+                principalTable: "NovelClones",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_AspNetUsers_UserId",
-				table: "Novels");
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_AspNetUsers_UserId",
+                table: "Novels");
 
-			migrationBuilder.DropForeignKey(
-				name: "FK_Novels_NovelClones_NovelCloneId",
-				table: "Novels");
+            migrationBuilder.DropForeignKey(
+                name: "FK_Novels_NovelClones_NovelCloneId",
+                table: "Novels");
 
-			migrationBuilder.DropTable(
-				name: "NovelClones");
+            migrationBuilder.DropTable(
+                name: "NovelClones");
 
-			migrationBuilder.RenameColumn(
-				name: "UserId",
-				table: "Novels",
-				newName: "userId");
+            migrationBuilder.RenameColumn(
+                name: "UserId",
+                table: "Novels",
+                newName: "userId");
 
-			migrationBuilder.RenameColumn(
-				name: "NovelCloneId",
-				table: "Novels",
-				newName: "NovelNamesId");
+            migrationBuilder.RenameColumn(
+                name: "NovelCloneId",
+                table: "Novels",
+                newName: "NovelNamesId");
 
-			migrationBuilder.RenameIndex(
-				name: "IX_Novels_UserId",
-				table: "Novels",
-				newName: "IX_Novels_userId");
+            migrationBuilder.RenameIndex(
+                name: "IX_Novels_UserId",
+                table: "Novels",
+                newName: "IX_Novels_userId");
 
-			migrationBuilder.RenameIndex(
-				name: "IX_Novels_NovelCloneId",
-				table: "Novels",
-				newName: "IX_Novels_NovelNamesId");
+            migrationBuilder.RenameIndex(
+                name: "IX_Novels_NovelCloneId",
+                table: "Novels",
+                newName: "IX_Novels_NovelNamesId");
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_AspNetUsers_userId",
-				table: "Novels",
-				column: "userId",
-				principalTable: "AspNetUsers",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_AspNetUsers_userId",
+                table: "Novels",
+                column: "userId",
+                principalTable: "AspNetUsers",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
 
-			migrationBuilder.AddForeignKey(
-				name: "FK_Novels_NovelNames_NovelNamesId",
-				table: "Novels",
-				column: "NovelNamesId",
-				principalTable: "NovelNames",
-				principalColumn: "Id",
-				onDelete: ReferentialAction.Cascade);
-		}
-	}
+            migrationBuilder.AddForeignKey(
+                name: "FK_Novels_NovelNames_NovelNamesId",
+                table: "Novels",
+                column: "NovelNamesId",
+                principalTable: "NovelNames",
+                principalColumn: "Id",
+                onDelete: ReferentialAction.Cascade);
+        }
+    }
 }
Index: WebApi/Controllers/NovelUserController.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using FluentValidation;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspNetCore.Mvc;\r\nusing WebApi.DTOs;\r\nusing WebApi.Enums;\r\nusing WebApi.Extensions;\r\nusing WebApi.Responses;\r\nusing WebApi.Services;\r\nusing WebApi.Validators;\r\n\r\nnamespace WebApi.Controllers;\r\n\r\n[Route(\"api/[controller]\")]\r\n[ApiController]\r\npublic class NovelUserController : ControllerBase\r\n{\r\n    private readonly NovelService _novelService;\r\n    private readonly NovelUserService _novelUserService;\r\n    private readonly IValidator<AddNovelUserDto> _novelUserValidator;\r\n\r\n    public NovelUserController(NovelService novelService, NovelUserService novelUserService,\r\n        IValidator<AddNovelUserDto> novelUserValidator)\r\n    {\r\n        _novelService = novelService;\r\n        _novelUserService = novelUserService;\r\n        _novelUserValidator = novelUserValidator;\r\n    }\r\n\r\n    \r\n    [HttpGet(\"{novelId}\")]\r\n    [Authorize]\r\n    public IActionResult GetNovelUserByNovelId(int novelId)\r\n    {\r\n        return Ok(_novelUserService.GetNovelUsersByNovelId(novelId));\r\n    }\r\n\r\n    [HttpPost]\r\n    [Authorize]\r\n    public async Task<IActionResult> AddNovelUser([FromBody] AddNovelUserDto novelUser)\r\n    {\r\n        var validationResult = await _novelUserValidator.ValidateAsync(novelUser);\r\n\r\n        if (!validationResult.IsValid)\r\n        {\r\n            return BadRequest(validationResult.Errors);\r\n        }\r\n\r\n        //Check If CurrentUser Have Permission To Novel\r\n        var novel = _novelService.GetById(novelUser.NovelId);\r\n\r\n        if (novel == null) // check if novel not exist\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"No Novel With This Id\"\r\n            };\r\n        }\r\n\r\n        if (novel.UserId != User.GetCurrentUserId())\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Cant Add Novel User If You Not Owner Of This Novel\"\r\n            };\r\n        }\r\n\r\n        //Add NovelUser\r\n        var addResult = await _novelUserService.AddNovelUser(novelUser.NovelId, novelUser.UserName);\r\n        switch (addResult.Item1)\r\n        {\r\n            case EAddNovelUserResult.Success:\r\n                return Ok(new\r\n                {\r\n                    Status = \"Success\",\r\n                    Description = \"Added\",\r\n                    Id = addResult.Item2\r\n                });\r\n            \r\n            case EAddNovelUserResult.AlreadyOwnPermission:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"User Already Have Permission On This Novel\"\r\n                };\r\n            \r\n            case EAddNovelUserResult.UsernameNotExist:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"This Username Not Exist\"\r\n                };\r\n            \r\n            default:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"Unknown Error\"\r\n                };\r\n        }\r\n        \r\n    }\r\n    \r\n    [HttpDelete(\"{novelId}/{novelUserId}\")]\r\n    [Authorize]\r\n    public async Task<IActionResult> RemoveNovelUser(int novelId,int novelUserId)\r\n    {\r\n        var novelUser = await _novelUserService.GetNovelUserOwnerByNovelId(novelId);\r\n        \r\n        if (novelUser?.UserId != User.GetCurrentUserId()) //check if current User Have Permission To Delete This NovelUser\r\n        {\r\n            return new BadRequestResponse\r\n            {\r\n                Description = \"You Cant Remove Novel User If You Not Owner Of This Novel\"\r\n            };\r\n        }\r\n\r\n        //Remove NovelUser\r\n        var removeResult = await _novelUserService.RemoveNovelUserByNovelUserId(novelUserId, novelUser.UserId);\r\n\r\n        switch (removeResult)\r\n        {\r\n            case ERemoveNovelUserResult.Success:\r\n                return new OkResponse\r\n                {\r\n                    Description = \"Removed\"\r\n                };\r\n            \r\n            case ERemoveNovelUserResult.AlreadyDontOwnPermission:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"User Already Dont Have Permission On This Novel\"\r\n                };\r\n            \r\n            case ERemoveNovelUserResult.OwnerTryRemoveItself:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"You Cant Remove Yourself\"\r\n                };\r\n            \r\n            case ERemoveNovelUserResult.ThisNovelUserIdNotExist:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"There is No NovelUser With This Id\"\r\n                };\r\n            \r\n            default:\r\n                return new BadRequestResponse\r\n                {\r\n                    Description = \"Unknown Error\"\r\n                };\r\n        }\r\n        \r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Controllers/NovelUserController.cs b/WebApi/Controllers/NovelUserController.cs
--- a/WebApi/Controllers/NovelUserController.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Controllers/NovelUserController.cs	(date 1705789619841)
@@ -6,7 +6,6 @@
 using WebApi.Extensions;
 using WebApi.Responses;
 using WebApi.Services;
-using WebApi.Validators;
 
 namespace WebApi.Controllers;
 
@@ -26,7 +25,7 @@
         _novelUserValidator = novelUserValidator;
     }
 
-    
+
     [HttpGet("{novelId}")]
     [Authorize]
     public IActionResult GetNovelUserByNovelId(int novelId)
@@ -75,34 +74,34 @@
                     Description = "Added",
                     Id = addResult.Item2
                 });
-            
+
             case EAddNovelUserResult.AlreadyOwnPermission:
                 return new BadRequestResponse
                 {
                     Description = "User Already Have Permission On This Novel"
                 };
-            
+
             case EAddNovelUserResult.UsernameNotExist:
                 return new BadRequestResponse
                 {
                     Description = "This Username Not Exist"
                 };
-            
+
             default:
                 return new BadRequestResponse
                 {
                     Description = "Unknown Error"
                 };
         }
-        
+
     }
-    
+
     [HttpDelete("{novelId}/{novelUserId}")]
     [Authorize]
-    public async Task<IActionResult> RemoveNovelUser(int novelId,int novelUserId)
+    public async Task<IActionResult> RemoveNovelUser(int novelId, int novelUserId)
     {
         var novelUser = await _novelUserService.GetNovelUserOwnerByNovelId(novelId);
-        
+
         if (novelUser?.UserId != User.GetCurrentUserId()) //check if current User Have Permission To Delete This NovelUser
         {
             return new BadRequestResponse
@@ -121,31 +120,31 @@
                 {
                     Description = "Removed"
                 };
-            
+
             case ERemoveNovelUserResult.AlreadyDontOwnPermission:
                 return new BadRequestResponse
                 {
                     Description = "User Already Dont Have Permission On This Novel"
                 };
-            
+
             case ERemoveNovelUserResult.OwnerTryRemoveItself:
                 return new BadRequestResponse
                 {
                     Description = "You Cant Remove Yourself"
                 };
-            
+
             case ERemoveNovelUserResult.ThisNovelUserIdNotExist:
                 return new BadRequestResponse
                 {
                     Description = "There is No NovelUser With This Id"
                 };
-            
+
             default:
                 return new BadRequestResponse
                 {
                     Description = "Unknown Error"
                 };
         }
-        
+
     }
 }
\ No newline at end of file
Index: WebApi/Migrations/20231225193503_Add_EntityName.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore.Migrations;\r\n\r\n#nullable disable\r\n\r\nnamespace WebApi.Migrations\r\n{\r\n\t/// <inheritdoc />\r\n\tpublic partial class Add_EntityName : Migration\r\n\t{\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Up(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.CreateTable(\r\n\t\t\t\tname: \"EntityNames\",\r\n\t\t\t\tcolumns: table => new\r\n\t\t\t\t{\r\n\t\t\t\t\tId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t\t\t.Annotation(\"SqlServer:Identity\", \"1, 1\"),\r\n\t\t\t\t\tEnglishName = table.Column<string>(type: \"VARCHAR(256)\", maxLength: 256, nullable: false),\r\n\t\t\t\t\tArabicName = table.Column<string>(type: \"nvarchar(max)\", nullable: false),\r\n\t\t\t\t\tGender = table.Column<string>(type: \"nvarchar(1)\", nullable: false),\r\n\t\t\t\t\tNovelId = table.Column<int>(type: \"int\", nullable: false)\r\n\t\t\t\t},\r\n\t\t\t\tconstraints: table =>\r\n\t\t\t\t{\r\n\t\t\t\t\ttable.PrimaryKey(\"PK_EntityNames\", x => x.Id);\r\n\t\t\t\t\ttable.ForeignKey(\r\n\t\t\t\t\t\tname: \"FK_EntityNames_Novels_NovelId\",\r\n\t\t\t\t\t\tcolumn: x => x.NovelId,\r\n\t\t\t\t\t\tprincipalTable: \"Novels\",\r\n\t\t\t\t\t\tprincipalColumn: \"Id\",\r\n\t\t\t\t\t\tonDelete: ReferentialAction.Cascade);\r\n\t\t\t\t});\r\n\r\n\t\t\tmigrationBuilder.CreateIndex(\r\n\t\t\t\tname: \"IX_EntityNames_NovelId\",\r\n\t\t\t\ttable: \"EntityNames\",\r\n\t\t\t\tcolumn: \"NovelId\");\r\n\t\t}\r\n\r\n\t\t/// <inheritdoc />\r\n\t\tprotected override void Down(MigrationBuilder migrationBuilder)\r\n\t\t{\r\n\t\t\tmigrationBuilder.DropTable(\r\n\t\t\t\tname: \"EntityNames\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Migrations/20231225193503_Add_EntityName.cs b/WebApi/Migrations/20231225193503_Add_EntityName.cs
--- a/WebApi/Migrations/20231225193503_Add_EntityName.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Migrations/20231225193503_Add_EntityName.cs	(date 1705789619961)
@@ -4,45 +4,45 @@
 
 namespace WebApi.Migrations
 {
-	/// <inheritdoc />
-	public partial class Add_EntityName : Migration
-	{
-		/// <inheritdoc />
-		protected override void Up(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.CreateTable(
-				name: "EntityNames",
-				columns: table => new
-				{
-					Id = table.Column<int>(type: "int", nullable: false)
-						.Annotation("SqlServer:Identity", "1, 1"),
-					EnglishName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: false),
-					ArabicName = table.Column<string>(type: "nvarchar(max)", nullable: false),
-					Gender = table.Column<string>(type: "nvarchar(1)", nullable: false),
-					NovelId = table.Column<int>(type: "int", nullable: false)
-				},
-				constraints: table =>
-				{
-					table.PrimaryKey("PK_EntityNames", x => x.Id);
-					table.ForeignKey(
-						name: "FK_EntityNames_Novels_NovelId",
-						column: x => x.NovelId,
-						principalTable: "Novels",
-						principalColumn: "Id",
-						onDelete: ReferentialAction.Cascade);
-				});
+    /// <inheritdoc />
+    public partial class Add_EntityName : Migration
+    {
+        /// <inheritdoc />
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "EntityNames",
+                columns: table => new
+                {
+                    Id = table.Column<int>(type: "int", nullable: false)
+                        .Annotation("SqlServer:Identity", "1, 1"),
+                    EnglishName = table.Column<string>(type: "VARCHAR(256)", maxLength: 256, nullable: false),
+                    ArabicName = table.Column<string>(type: "nvarchar(max)", nullable: false),
+                    Gender = table.Column<string>(type: "nvarchar(1)", nullable: false),
+                    NovelId = table.Column<int>(type: "int", nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_EntityNames", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_EntityNames_Novels_NovelId",
+                        column: x => x.NovelId,
+                        principalTable: "Novels",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
 
-			migrationBuilder.CreateIndex(
-				name: "IX_EntityNames_NovelId",
-				table: "EntityNames",
-				column: "NovelId");
-		}
+            migrationBuilder.CreateIndex(
+                name: "IX_EntityNames_NovelId",
+                table: "EntityNames",
+                column: "NovelId");
+        }
 
-		/// <inheritdoc />
-		protected override void Down(MigrationBuilder migrationBuilder)
-		{
-			migrationBuilder.DropTable(
-				name: "EntityNames");
-		}
-	}
+        /// <inheritdoc />
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "EntityNames");
+        }
+    }
 }
Index: WebApi/Services/NovelUserService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore;\r\nusing WebApi.Data;\r\nusing WebApi.DTOs;\r\nusing WebApi.Enums;\r\nusing WebApi.Models;\r\n\r\nnamespace WebApi.Services;\r\n\r\npublic class NovelUserService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n    private readonly NovelSharedService _novelSharedService;\r\n\r\n    public NovelUserService(ApplicationDbContext context, NovelSharedService novelSharedService)\r\n    {\r\n        _context = context;\r\n        _novelSharedService = novelSharedService;\r\n    }\r\n\r\n    public NovelUserDto[] GetNovelUsersByNovelId(int novelId)\r\n    {\r\n        return _context.NovelUsers.Where(n => n.NovelId == novelId).Select(novelUser => new NovelUserDto()\r\n        {\r\n            UserName = novelUser.User!.UserName!,\r\n            NovelUserId = novelUser.Id,\r\n            NovelId = novelUser.NovelId,\r\n        }).ToArray();\r\n    }\r\n\r\n    public async Task<NovelUser?> GetNovelUser(int novelUserId)\r\n    {\r\n        return await _context.NovelUsers.FirstOrDefaultAsync(n => n.Id == novelUserId);\r\n    }\r\n    \r\n    public async Task<NovelUser?> GetNovelUserOwnerByNovelId(int novelId)\r\n    {\r\n        return await _context.NovelUsers.FirstOrDefaultAsync(n => n.NovelId == novelId && n.IsOwner == true);\r\n    }\r\n    \r\n    public async Task<Tuple<EAddNovelUserResult,int>> AddNovelUser(int novelId, string username,bool isOwner = false)\r\n    {\r\n        var userId = await _context.Users.Where(u => u.UserName == username).Select(u => u.Id).FirstOrDefaultAsync();\r\n\r\n        if (userId == 0)\r\n        {\r\n            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.UsernameNotExist,0);\r\n        }\r\n        \r\n        return await AddNovelUser(novelId, userId);\r\n    }\r\n    \r\n    public async Task<Tuple<EAddNovelUserResult,int>> AddNovelUser(int novelId, int userId, bool isOwner = false)\r\n    {\r\n        if (await _novelSharedService.IsUserHavePermissionOnThisNovel(novelId, userId)) \r\n            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.AlreadyOwnPermission,0); // user already Have Permission in this novel\r\n        \r\n        var novelUser = new NovelUser\r\n        {\r\n            NovelId = novelId,\r\n            UserId = userId,\r\n            IsOwner = isOwner\r\n        };\r\n\r\n        await _context.NovelUsers.AddAsync(novelUser);\r\n\r\n        if (await _context.SaveChangesAsync() != 0)\r\n        {\r\n            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.Success,novelUser.Id);\r\n        }\r\n        \r\n        return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.UnknownError,0);\r\n    }\r\n    \r\n    public async Task<bool> RemoveNovelUser(int novelId, string username)\r\n    {\r\n        var userId = await _context.Users.Where(u => u.UserName == username).Select(u => u.Id).FirstOrDefaultAsync();\r\n\r\n        if (userId == 0)\r\n        {\r\n            return false;\r\n        }\r\n        \r\n        return await RemoveNovelUser(novelId, userId);\r\n    }\r\n    \r\n    public async Task<bool> RemoveNovelUser(int novelId, int userId)\r\n    {\r\n        var novelUser = await _context.NovelUsers.FirstOrDefaultAsync(n => n.NovelId == novelId && n.UserId == userId);\r\n\r\n        if (novelUser is null)\r\n            return false;\r\n        \r\n        _context.NovelUsers.Remove(novelUser);\r\n\r\n        return await _context.SaveChangesAsync() != 0; // check if Removed Successfully\r\n    }\r\n    \r\n    public async Task<ERemoveNovelUserResult> RemoveNovelUserByNovelUserId(int novelUserId,int userId)\r\n    {\r\n        var novelUser = await _context.NovelUsers.FirstOrDefaultAsync(n => n.Id == novelUserId);\r\n\r\n        if (novelUser is null)\r\n            return ERemoveNovelUserResult.ThisNovelUserIdNotExist;\r\n\r\n        if (novelUser.UserId == userId || novelUser.IsOwner) // Mean Owner Of Novel Try Remove Itself\r\n        {\r\n            return ERemoveNovelUserResult.OwnerTryRemoveItself;\r\n        }\r\n        \r\n        _context.NovelUsers.Remove(novelUser);\r\n\r\n        if (await _context.SaveChangesAsync() == 0)\r\n        {\r\n            return ERemoveNovelUserResult.AlreadyDontOwnPermission;\r\n        }\r\n\r\n        return ERemoveNovelUserResult.Success;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Services/NovelUserService.cs b/WebApi/Services/NovelUserService.cs
--- a/WebApi/Services/NovelUserService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Services/NovelUserService.cs	(date 1705789619754)
@@ -31,29 +31,29 @@
     {
         return await _context.NovelUsers.FirstOrDefaultAsync(n => n.Id == novelUserId);
     }
-    
+
     public async Task<NovelUser?> GetNovelUserOwnerByNovelId(int novelId)
     {
         return await _context.NovelUsers.FirstOrDefaultAsync(n => n.NovelId == novelId && n.IsOwner == true);
     }
-    
-    public async Task<Tuple<EAddNovelUserResult,int>> AddNovelUser(int novelId, string username,bool isOwner = false)
+
+    public async Task<Tuple<EAddNovelUserResult, int>> AddNovelUser(int novelId, string username, bool isOwner = false)
     {
         var userId = await _context.Users.Where(u => u.UserName == username).Select(u => u.Id).FirstOrDefaultAsync();
 
         if (userId == 0)
         {
-            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.UsernameNotExist,0);
+            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.UsernameNotExist, 0);
         }
-        
+
         return await AddNovelUser(novelId, userId);
     }
-    
-    public async Task<Tuple<EAddNovelUserResult,int>> AddNovelUser(int novelId, int userId, bool isOwner = false)
+
+    public async Task<Tuple<EAddNovelUserResult, int>> AddNovelUser(int novelId, int userId, bool isOwner = false)
     {
-        if (await _novelSharedService.IsUserHavePermissionOnThisNovel(novelId, userId)) 
-            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.AlreadyOwnPermission,0); // user already Have Permission in this novel
-        
+        if (await _novelSharedService.IsUserHavePermissionOnThisNovel(novelId, userId))
+            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.AlreadyOwnPermission, 0); // user already Have Permission in this novel
+
         var novelUser = new NovelUser
         {
             NovelId = novelId,
@@ -65,12 +65,12 @@
 
         if (await _context.SaveChangesAsync() != 0)
         {
-            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.Success,novelUser.Id);
+            return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.Success, novelUser.Id);
         }
-        
-        return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.UnknownError,0);
+
+        return new Tuple<EAddNovelUserResult, int>(EAddNovelUserResult.UnknownError, 0);
     }
-    
+
     public async Task<bool> RemoveNovelUser(int novelId, string username)
     {
         var userId = await _context.Users.Where(u => u.UserName == username).Select(u => u.Id).FirstOrDefaultAsync();
@@ -79,23 +79,23 @@
         {
             return false;
         }
-        
+
         return await RemoveNovelUser(novelId, userId);
     }
-    
+
     public async Task<bool> RemoveNovelUser(int novelId, int userId)
     {
         var novelUser = await _context.NovelUsers.FirstOrDefaultAsync(n => n.NovelId == novelId && n.UserId == userId);
 
         if (novelUser is null)
             return false;
-        
+
         _context.NovelUsers.Remove(novelUser);
 
         return await _context.SaveChangesAsync() != 0; // check if Removed Successfully
     }
-    
-    public async Task<ERemoveNovelUserResult> RemoveNovelUserByNovelUserId(int novelUserId,int userId)
+
+    public async Task<ERemoveNovelUserResult> RemoveNovelUserByNovelUserId(int novelUserId, int userId)
     {
         var novelUser = await _context.NovelUsers.FirstOrDefaultAsync(n => n.Id == novelUserId);
 
@@ -106,7 +106,7 @@
         {
             return ERemoveNovelUserResult.OwnerTryRemoveItself;
         }
-        
+
         _context.NovelUsers.Remove(novelUser);
 
         if (await _context.SaveChangesAsync() == 0)
Index: WebApi/Services/NovelSharedService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Microsoft.EntityFrameworkCore;\r\nusing WebApi.Data;\r\n\r\nnamespace WebApi.Services;\r\n\r\npublic class NovelSharedService\r\n{\r\n    private readonly ApplicationDbContext _context;\r\n\r\n    public NovelSharedService(ApplicationDbContext context)\r\n    {\r\n        _context = context;\r\n    }\r\n\r\n    public async Task<bool> IsUserHavePermissionOnThisNovel(int novelId, int userId)\r\n    {\r\n        var novel = await _context.NovelUsers.FirstOrDefaultAsync(n => n.NovelId == novelId && n.UserId == userId);\r\n        return novel != null;\r\n    }\r\n    \r\n    public async Task<bool> IsUserHavePermissionOnThisNovelByNovelUserId(int novelUserId, int userId)\r\n    {\r\n        var novel = await _context.NovelUsers.FirstOrDefaultAsync(n => n.Id == novelUserId && n.UserId == userId);\r\n        return novel != null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/WebApi/Services/NovelSharedService.cs b/WebApi/Services/NovelSharedService.cs
--- a/WebApi/Services/NovelSharedService.cs	(revision f65f0cff7f090c19b5f1daa005227c7f48114659)
+++ b/WebApi/Services/NovelSharedService.cs	(date 1705789619805)
@@ -17,7 +17,7 @@
         var novel = await _context.NovelUsers.FirstOrDefaultAsync(n => n.NovelId == novelId && n.UserId == userId);
         return novel != null;
     }
-    
+
     public async Task<bool> IsUserHavePermissionOnThisNovelByNovelUserId(int novelUserId, int userId)
     {
         var novel = await _context.NovelUsers.FirstOrDefaultAsync(n => n.Id == novelUserId && n.UserId == userId);
