@page "/Identity/Login"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Web.Services
@inject UserService _userService;
@inject IDialogService _dialogService;
@inject NavigationManager _navigationManager;


<MudGrid>
    <MudItem xs="32" sm="12">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @ref="email" />
                <MudTextField T="string" Label="Password" @ref="password"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" />
                <div class="d-flex align-center justify-space-between">
                    <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Login</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? email;
    MudTextField<string>? password;
    MudForm? form;

    private IEnumerable<string> PasswordStrength(string pass)
    {
        if (string.IsNullOrWhiteSpace(pass))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pass.Length < 6)
            yield return "Password must be at least of length 6";
        if (!Regex.IsMatch(pass, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pass, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pass, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string pass)
    {
        if (password!.Value != pass)
            return "Passwords don't match";
        return null!;
    }

    async Task Submit()
    {
        if (errors.Length == 0)
        {
            if (await _userService.Login(email!.Text, password!.Text))
            {
                success = true;
                await _dialogService.ShowMessageBox("Successfully", "You Login Successfully");
                //StateHasChanged();
                _navigationManager.NavigateTo(""); // empty = home page
            }
            else
            {
                await _dialogService.ShowMessageBox("Error", "Username or Password Is Invalid");
            }
        }

    }

}