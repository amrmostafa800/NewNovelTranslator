@page "/Novels"
@using Web.Models
@using Web.Services
@using Web.Dialogs
@inject NovelService _novelService;
@inject IDialogService _dialogService
<PageTitle>Novels</PageTitle>

<MudButton OnClick="OpenAddNovelDialog">Add Novel</MudButton>
<MudTable T="Novel" RowClass="cursor-pointer" Items="@_novels" Hover="true" Breakpoint="Breakpoint.Sm" @ref="_novelsTable" OnRowClick="OnNovelRowClick">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Owner</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd Class="invisible" DataLabel="ID">@context.Id</MudTd>
        <MudTd Class="invisible" DataLabel="UserId">@context.UserId</MudTd>
    </RowTemplate>
</MudTable>

@code{

    private MudTable<Novel>? _novelsTable;

    Novel[] _novels = Array.Empty<Novel>();

    protected override async Task OnInitializedAsync()
    {
        _novels = await _novelService.GetAllNovels();
    }

    private void OpenAddNovelDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };
        _dialogService.Show<AddNovelDialog>("Add Novel", options);
    }

    private void OnNovelRowClick(TableRowClickEventArgs<Novel> novelRowEventArgs)
    {
        //await _dialogService.ShowMessageBox("test", tableRowClickEventArgs.Item.Name);
        //TDO Use _navigationManager to go to novel page (still not create novel page)
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullScreen = true
        };

        var dialogParam = new DialogParameters<NovelDialog>();
        dialogParam.Add(n => n.NovelId, novelRowEventArgs.Item.Id);

        _dialogService.Show<NovelDialog>(novelRowEventArgs.Item.Name, dialogParam, options);
    }

}