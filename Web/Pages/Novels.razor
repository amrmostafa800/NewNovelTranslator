@page "/Novels"
@using Web.Models
@using Web.Services
@using Web.Dialogs
@using Web.Enums
@inject NovelService NovelService;
@inject IDialogService DialogService
@inject UserService UserService
<PageTitle>Novels</PageTitle>

<MudButton OnClick="@OpenAddNovelDialog">Add Novel</MudButton>
<MudTable Class="cursor-pointer" T="NovelDto" RowClass="cursor-pointer" Items="@_novels" Hover="true" Breakpoint="Breakpoint.Sm" @ref="_novelsTable" OnRowClick="@OnNovelRowClick">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Owner</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudButton OnClick="@(()=> RemoveNovel(context))">Remove</MudButton>
        <MudTd Class="invisible" DataLabel="ID">@context.Id</MudTd>
        <MudTd Class="invisible" DataLabel="UserId">@context.UserId</MudTd>
    </RowTemplate>
</MudTable>

@code{

    private MudTable<NovelDto>? _novelsTable;

    List<NovelDto> _novels = new List<NovelDto>();

    protected override async Task OnInitializedAsync()
    {
        _novels = await NovelService.GetAllNovels();

        if (UserService.CurrentUsername == String.Empty)
        {
            UserService.CurrentUsername = await UserService.GetCurrentEmail();
        }
    }

    private void OpenAddNovelDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };
        DialogService.Show<AddNovelDialog>("Add Novel", options);
    }

    private void OnNovelRowClick(TableRowClickEventArgs<NovelDto> novelRowEventArgs)
    {
        //await _dialogService.ShowMessageBox("test", tableRowClickEventArgs.Item.Name);
        //TDO Use _navigationManager to go to novel page (still not create novel page)
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullScreen = true
        };

        var dialogParam = new DialogParameters<NovelDialog>();
        dialogParam.Add(n => n.NovelId, novelRowEventArgs.Item.Id);
        dialogParam.Add(n => n.IsDialogOpenedByOwner, IsOwnerOfNovel(novelRowEventArgs.Item.UserName));

        DialogService.Show<NovelDialog>(novelRowEventArgs.Item.Name, dialogParam, options);
    }

    private bool IsOwnerOfNovel(string username)
    {
        return UserService.CurrentUsername == username;
    }

    private async Task RemoveNovel(NovelDto context)
    {
        var result = await NovelService.RemoveNovel(context.Id);

        switch (result)
        {
            case ENovelResult.Success:
                _novels.Remove(context);
                DialogService?.ShowMessageBox("OK", "Deleted");
                break;
                
            case ENovelResult.AuthRequired:
                DialogService?.ShowMessageBox("Error", "Please Login First");
                break;
                
            case ENovelResult.NotExist:
                DialogService?.ShowMessageBox("Error", "Novel Id Not Exist");
                break;
                
            case ENovelResult.DontOwnPermission:
                DialogService?.ShowMessageBox("Error", "You Dont Have Permission To Delete Novel");
                break;
                
            case ENovelResult.ServerError:
                DialogService?.ShowMessageBox("Error", "Server Error, Please Contact Admin");
                break;
        }
    }

}