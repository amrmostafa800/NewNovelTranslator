@using Web.Services
@inherits LayoutComponentBase
@inject UserService _userService
@inject NavigationManager _navigationManager;

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode"/>
<MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Dark Mode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
        <div class="flex-grow-1"></div>
        <MudAvatar Rounded="true" Color="Color.Secondary">
            <MudIcon Icon="@Icons.Material.Filled.FormatListNumbered"/>
            <MudMenu Class="object-fill">
                @if (isAuth)
                {
                    <MudMenuItem OnClick="Logout">LogOut</MudMenuItem>
                }
                else
                {
                    <MudMenuItem OnClick="GoToLogin">Login</MudMenuItem>
                    <MudMenuItem OnClick="GoToRegister">Register</MudMenuItem>
                }
            </MudMenu>
        </MudAvatar>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Novel Translator</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-0 pt-0">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    private bool _isDarkMode = true;

    bool isAuth;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        if (await _userService.IsAuth())
        {
            isAuth = true;
        }

        SubscribeToEvents();
    }

    private void SubscribeToEvents()
    {
        _userService.OnLogin += OnLogin!;
        _userService.OnLogout += OnLogout!;
    }

    private void GoToLogin()
    {
        _navigationManager.NavigateTo("identity/Login");
    }

    private void GoToRegister()
    {
        _navigationManager.NavigateTo("identity/Register");
    }

    private async Task Logout()
    {
        await _userService.LogOut();
    }

    private void OnLogin(string email)
    {
        isAuth = true;
    }

    private void OnLogout(object sender, EventArgs e)
    {
        isAuth = false;
    }

}