@using Web.Services
@using Web.Models
@using Web.Enums
@inject NovelUserService NovelUserService
@inject IDialogService DialogService
<MudDialog>
    <DialogContent>
        <MudButton FullWidth="true" OnClick="@Back">Back</MudButton>
        <MudButton OnClick="@OpenAddNovelUserDialog">Add User</MudButton>
        <MudDataGrid T="NovelUserDto" Items="@_novelUsers" Bordered="true" Dense="true">
            <Columns>
                <PropertyColumn Property="x => x.userName" Title="Username" />
                <TemplateColumn><CellTemplate><MudButton OnClick="@(()=> RemoveNovelUser(context.Item))">Remove</MudButton> </CellTemplate></TemplateColumn>
            </Columns>
        </MudDataGrid>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public int NovelId { get; set; }

    List<NovelUserDto> _novelUsers = new List<NovelUserDto>();
    
    protected override async Task OnInitializedAsync()
    {
        _novelUsers = await NovelUserService.GetNovelUsersByNovelId(NovelId);
    }

    void Back() => MudDialog.Cancel();

    private async Task RemoveNovelUser(NovelUserDto? novelUser)
    {
        var result = await NovelUserService?.RemoveNovelUser(NovelId, novelUser!.NovelUserId)!;

        switch (result)
        {
            case ERemoveNovelUser.Success:
                DialogService?.ShowMessageBox("Ok", "Removed");
                _novelUsers.Remove(novelUser!);
                break;
                
            case ERemoveNovelUser.ServerError:
                DialogService?.ShowMessageBox("Error", "Server Error");
                break;
                
            case ERemoveNovelUser.NoPermission:
                DialogService?.ShowMessageBox("Error", "No Permission");
                break;
                
            case ERemoveNovelUser.ThisNovelUserIdNotExist: // Will Not Happen If Web Api Not Edited
                DialogService?.ShowMessageBox("Error", "Id Not Exist");
                break;
                
            case ERemoveNovelUser.OwnerTryRemoveItself:
                DialogService?.ShowMessageBox("Error", "You Cant Remove Yourself, You Are Owner Of Novel");
                break;
                
            case ERemoveNovelUser.UnknownError:
                DialogService?.ShowMessageBox("Error", "Unknown Error Please Report Admin");
                break;
        }
    }

    private async Task OpenAddNovelUserDialog()
    {
        var parameters = new DialogParameters<AddCharacterNamesDialog>();
        parameters.Add(p => p.NovelId, NovelId);
        
        var dialog = await DialogService.ShowAsync<AddNovelUserDialog>("Add User",parameters);
        var dialogResult = await dialog.Result;
        var dialogData = dialogResult.Data as NovelUserDto;
        
        if (!string.IsNullOrEmpty(dialogData?.userName))
        {
            _novelUsers.Add(dialogData);
        }
    }

}