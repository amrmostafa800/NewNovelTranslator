@using Web.Models
@using Web.Services
@using Web.Enums
@inject CharacterNameService CharacterNameService
@inject IDialogService DialogService

<MudButton OnClick="@Back">Back</MudButton>
<MudDialog>
    <DialogContent>
        <MudTable Class="cursor-pointer" Items="@_characterNames" @bind-SelectedItem="_selectedItem" Hover="true" Breakpoint="Breakpoint.Sm" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="WhenItemUpdated">
            <HeaderContent>
                <MudTh>EnglishName</MudTh>
                <MudTh>ArabicName</MudTh>
                <MudTh>Gender</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="EnglishName">@context.englishName</MudTd>
                <MudTd DataLabel="ArabicName">@context.arabicName</MudTd>
                <MudTd DataLabel="Gender">@context.gender</MudTd>
                <MudTd Class="invisible" DataLabel="Id">@context.Id</MudTd>
                <MudButton OnClick="@(()=> RemoveCharacterName(context))">Remove</MudButton>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="englishName">
                    <MudTextField @bind-Value="@context.englishName" Required/>
                </MudTd>
                <MudTd DataLabel="arabicName">
                    <MudTextField @bind-Value="@context.arabicName" Required/>
                </MudTd>
                <MudTd DataLabel="gender">
                    <MudTextField @bind-Value="@context.gender" Required/>
                </MudTd>
            </RowEditingTemplate>
        </MudTable>
    </DialogContent>
</MudDialog>

 @code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public int NovelId { get; set; }

    void Back()
    {
        MudDialog.Cancel();
    }

    private CharacterNameDto _selectedItem = null!;
    List<CharacterNameDto>? _characterNames;
    private CharacterNameDto? _characterNameBeforeEdit;


    protected override async Task OnInitializedAsync()
    {
        _characterNames = await CharacterNameService.GetAllEntityNamesByNovelId(NovelId);
    }

    private void BackupItem(object element)
    {
        _characterNameBeforeEdit = new CharacterNameDto
        {
            englishName = ((CharacterNameDto)element).englishName,
            arabicName = ((CharacterNameDto)element).arabicName,
            gender = ((CharacterNameDto)element).gender,
            Id = ((CharacterNameDto)element).Id,
        };

        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((CharacterNameDto)element).englishName = _characterNameBeforeEdit!.englishName;
        ((CharacterNameDto)element).arabicName = _characterNameBeforeEdit!.arabicName;
        ((CharacterNameDto)element).gender = _characterNameBeforeEdit!.gender;
        StateHasChanged();
    }

    private async void WhenItemUpdated(object element)
    {
        var characterName = element as CharacterNameDto;

        if (characterName is null)
            return;

        //Check If Item Not Updated
        if (characterName == _characterNameBeforeEdit)
        {
            return; // return to dont send any requests to server
        }

        //Call Update API
        var result = await CharacterNameService.UpdateEntityNameById(characterName);

        await ShowMassageBoxForResult(result);
    }

    private async Task RemoveCharacterName(CharacterNameDto item)
    {
        //Remove From Database
        var result = await CharacterNameService.RemoveEntityNameById(item.Id);

        await ShowMassageBoxForResult(result);

        //Remove From Table
        _characterNames?.Remove(item);
    }

    private async Task ShowMassageBoxForResult(EEntityNameResult result)
    {
        switch (result)
        {
            case EEntityNameResult.Success:
                break;
            case EEntityNameResult.NoPermission:
                await DialogService.ShowMessageBox("No Permission", "You Dont Have Permission For This Action");
                break;
            case EEntityNameResult.AuthRequired:
                await DialogService.ShowMessageBox("Auth Required", "Please Login First");
                break;
            case EEntityNameResult.ServerError:
                await DialogService.ShowMessageBox("Error", "Failed To Connect To Server, Please Report");
                break;
        }
    }
}