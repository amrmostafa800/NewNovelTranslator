@using Web.Models
@using Web.Services
@inject CharacterNameService CharacterNameService
@inject IDialogService DialogService

<MudButton OnClick="Back">Back</MudButton>
<MudDialog>
    <DialogContent>
        <MudTable Items="@_characterNames" @bind-SelectedItem="_selectedItem1" Hover="true" Breakpoint="Breakpoint.Sm" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted">
            <HeaderContent>
                <MudTh>EnglishName</MudTh>
                <MudTh>ArabicName</MudTh>
                <MudTh>Gender</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="EnglishName">@context.englishName</MudTd>
                <MudTd DataLabel="ArabicName">@context.arabicName</MudTd>
                <MudTd DataLabel="Gender">@context.gender</MudTd>
                <MudTd Class="invisible" DataLabel="Id">@context.Id</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="englishName">
                    <MudTextField @bind-Value="@context.englishName" Required/>
                </MudTd>
                <MudTd DataLabel="arabicName">
                    <MudTextField @bind-Value="@context.arabicName" Required/>
                </MudTd>
                <MudTd DataLabel="gender">
                    <MudTextField @bind-Value="@context.gender" Required/>
                </MudTd>
                @*<MudTd DataLabel="id">@context.Id</MudTd>*@
            </RowEditingTemplate>
        </MudTable>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public int NovelId { get; set; }

    void Back()
    {
        MudDialog.Cancel();
    }

    private CharacterName _selectedItem1 = null!;
    CharacterName[]? _characterNames;
    private CharacterName? _characterNameBeforeEdit;


    protected override async Task OnInitializedAsync()
    {
        _characterNames = await CharacterNameService.GetAllEntityNamesByNovelId(NovelId);
    }

    private void BackupItem(object element)
    {
        _characterNameBeforeEdit = new CharacterName
        {
            englishName = ((CharacterName)element).englishName,
            arabicName = ((CharacterName)element).arabicName,
            gender = ((CharacterName)element).gender
        };
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((CharacterName)element).englishName = _characterNameBeforeEdit!.englishName;
        ((CharacterName)element).arabicName = _characterNameBeforeEdit!.arabicName;
        ((CharacterName)element).gender = _characterNameBeforeEdit!.gender;
        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object element)
    {
        var characterName = element as CharacterName;

        if (characterName is null)
            return;
        
        //Call Update API
        await CharacterNameService.UpdateEntityNameById(characterName);
    }
    
}