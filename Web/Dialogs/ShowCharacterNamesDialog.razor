@using Web.Models
@using Web.Services
@inject CharacterNameService EntityNamesService
<MudButton OnClick="Back">Back</MudButton>
<MudDialog>
    <DialogContent>
        <MudTable Items="@_characterNames" @bind-SelectedItem="_selectedItem1" Hover="true" Breakpoint="Breakpoint.Sm" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues">
            <HeaderContent>
                <MudTh>EnglishName</MudTh>
                <MudTh>ArabicName</MudTh>
                <MudTh>Gender</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="EnglishName">@context.englishName</MudTd>
                <MudTd DataLabel="ArabicName">@context.arabicName</MudTd>
                <MudTd DataLabel="Gender">@context.gender</MudTd>
                <MudTd Class="invisible" DataLabel="Id">@context.id</MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="englishName">
                    <MudTextField @bind-Value="@context.englishName" Required/>
                </MudTd>
                <MudTd DataLabel="arabicName">
                    <MudTextField @bind-Value="@context.arabicName" Required/>
                </MudTd>
                <MudTd DataLabel="gender">
                    <MudTextField @bind-Value="@context.gender" Required/>
                </MudTd>
                <MudTd DataLabel="id">@context.id</MudTd>
            </RowEditingTemplate>
        </MudTable>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public int NovelId { get; set; }

    void Back()
    {
        MudDialog.Cancel();
    }

    private CharacterName _selectedItem1;
    CharacterName[]? _characterNames;
    private CharacterName? _characterNameBeforeEdit;
    private readonly List<string> _editEvents = new();
    private readonly TableEditTrigger _editTrigger = TableEditTrigger.RowClick;


    protected override async Task OnInitializedAsync()
    {
        _characterNames = await EntityNamesService.GetAllEntityNamesByNovelId(NovelId);
    }

    private void AddEditionEvent(string message)
    {
        _editEvents.Add(message);
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        _characterNameBeforeEdit = new CharacterName
        {
            englishName = ((CharacterName)element).englishName,
            arabicName = ((CharacterName)element).arabicName,
            gender = ((CharacterName)element).gender
        };
        AddEditionEvent($"RowEditPreview event: made a backup of Element {((CharacterName)element).englishName}");
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((CharacterName)element).englishName = _characterNameBeforeEdit!.englishName;
        ((CharacterName)element).arabicName = _characterNameBeforeEdit!.arabicName;
        ((CharacterName)element).gender = _characterNameBeforeEdit!.gender;
        AddEditionEvent($"RowEditCancel event: Editing of Element {((CharacterName)element).englishName} canceled");
    }

}