@using Web.Services
@inject NovelService _novelService;
@inject IDialogService _dialogService;
@inject IJSRuntime JsRuntime;
@inject NavigationManager _manager;

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudTextField T="string" Label="NovelName" Required="true" RequiredError="Novel Name is required!" @ref="NovelName" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    bool success;
    string[] errors = { };
    MudForm? form;
    MudTextField<string>? NovelName;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    async void Submit()
    {
        if (errors.Length == 0 && NovelName!.Text != null)
        {
            if (await _novelService.AddNovel(NovelName!.Text!))
            {
                MudDialog.Close(DialogResult.Ok(true));
                _manager.Refresh();
            }
            else
            {
                await _dialogService.ShowMessageBox("Error", "Api Server Down Or Uknown Error Please Report");
            }
        }
    }
    void Cancel() => MudDialog.Cancel();
}