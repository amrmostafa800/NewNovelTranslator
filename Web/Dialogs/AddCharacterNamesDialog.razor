@using Web.Models
@using Web.Services
@inject CharacterNameService CharacterNameService

<MudButton OnClick="Back">Back</MudButton>
<MudDialog>
    <DialogContent>
        <MudButton OnClick="@AddCharacterName" Color="@Color.Success" Class="add-item-btn">Add Character Name</MudButton>
        <MudDataGrid T="CharacterName" Items="@_characterNames" ReadOnly="false" EditMode="@DataGridEditMode.Cell"
                     Bordered="true" Dense="true" EditTrigger="@DataGridEditTrigger.OnRowClick">
            <Columns>
                <PropertyColumn Property="x => x.englishName"/>
                <PropertyColumn Property="x => x.arabicName"/>
                <PropertyColumn Property="x => x.gender">
                    <EditTemplate>
                        <MudSelect T="string" @bind-Value="context.Item.gender" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                            <MudSelectItem Value="@("M")">Male</MudSelectItem>
                            <MudSelectItem Value="@("F")">Female</MudSelectItem>
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>

            </Columns>
        </MudDataGrid>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public int NovelId { get; set; }

    List<CharacterName>? _characterNames;

    void Back()
    {
        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        _characterNames = new List<CharacterName>();
    }

    void AddCharacterName()
    {
        _characterNames.Add(new CharacterName()
        {
            arabicName = "",
            englishName = "",
            gender = "M",
            id = 0
        });
    }

    void OpenExtractCharacterNamesFromTextDialog()
    {
        //TDO
    }
}