@using Web.Models
@using Web.Services
@using Web.Dialogs.SubDialog
@using Web.Enums
@inject CharacterNameService CharacterNameService
@inject IDialogService DialogService;

<MudDialog Class="overflow-scroll">
    <DialogContent>
        <MudButton FullWidth="true" OnClick="@Back">Back</MudButton>
        <MudButton OnClick="@AddCharacterName" Color="@Color.Success" Class="add-item-btn">Add Character Name</MudButton>
        <MudButton OnClick="@ExtractCharacterNamesFromTextByAi" Color="@Color.Default" Class="add-item-btn">Extract Character Names By AI</MudButton>
        <MudDataGrid T="AddCharacterNameDto" Items="@_characterNames" ReadOnly="false" EditMode="@DataGridEditMode.Cell"
                     Bordered="true" Dense="true" EditTrigger="@DataGridEditTrigger.OnRowClick">
            <Columns>
                <PropertyColumn Property="x => x.englishName"> </PropertyColumn>
                <PropertyColumn Property="x => x.gender">
                    <EditTemplate>
                        <MudSelect T="char" @bind-Value="context.Item.gender" Required RequiredError="You must select a Position!!!" Margin="@Margin.Dense">
                            <MudSelectItem Value="@('M')">Male</MudSelectItem>
                            <MudSelectItem Value="@('F')">Female</MudSelectItem>
                        </MudSelect>
                    </EditTemplate>
                </PropertyColumn>
                <TemplateColumn>
                    <EditTemplate>
                    <MudButton OnClick="@(()=> RemoveCharacterName(context.Item))">Remove</MudButton>
                    </EditTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudButton Color="Color.Default" FullWidth="true" OnClick="@Submit">Submit</MudButton>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public int NovelId { get; set; }

    List<AddCharacterNameDto>? _characterNames;

    void Back()
    {
        MudDialog.Cancel();
    }

    async Task Submit()
    {
        //Validate _characterNames is not empty
        if (_characterNames?.Count == 0)
        {
            await DialogService.ShowMessageBox("Error", "Please Add One Character Name At Last");
            return;
        }
        
        //Submit Character Names With To This Novel
        var submitResult = await CharacterNameService.AddEntityNamesByNovelId(_characterNames!, NovelId);

        switch (submitResult)
        {
            case EEntityNameResult.Success:
                await DialogService.ShowMessageBox("Success", "Character Names Has Been Added");
                break;
                case EEntityNameResult.AuthRequired:
                await DialogService.ShowMessageBox("Auth Required", "Please Login First");
                break;
            case EEntityNameResult.IsExist:
                await DialogService.ShowMessageBox("Already Exist", "One Of More Of Character Names Is Already Exist");
                break;
            case EEntityNameResult.ServerError:
                await DialogService.ShowMessageBox("Error", "Failed To Connect To Server, Please Report");
                break;
        }
        
        MudDialog.Close(DialogResult.Ok(true));
    }

    protected override void OnInitialized()
    {
        _characterNames = new List<AddCharacterNameDto>();
    }

    void AddCharacterName()
    {
        _characterNames?.Add(new AddCharacterNameDto()
        {
            englishName = "",
            gender = 'M',
        });
    }
    
    void RemoveCharacterName(AddCharacterNameDto item)
    {
        _characterNames?.Remove(item);
    }
    
    void AddCharacterName(string englishName)
    {
        _characterNames?.Add(new AddCharacterNameDto()
        {
            englishName = englishName,
        });
    }

    async Task ExtractCharacterNamesFromTextByAi()
    {
        //Open Text Dialog
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true
        };
        var dialog = await DialogService.ShowAsync<TextBoxDialog>("Enter Novel Text", options);
        
        var dialogResult = await dialog.Result;
        
        if (dialogResult.Canceled)
            return;

        //Get Text From Dialog
        var text = dialogResult.Data.ToString();
        
        //Extract CharacterNames From Text By AI
        var characterNames = await CharacterNameService.ExtractEntityNamesFromText(text!);

        foreach (var name in characterNames)
        {
            AddCharacterName(name);
        }
    }
}